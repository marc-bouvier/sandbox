{
    "$schema": "https://aka.ms/codetour-schema",
    "title": "Frontend basic tour",
    "steps": [
      {
        "file": "js/public/index.html",
        "description": "## Html entry point : `public/index.html`\n\nThis `public/index.html` is the first file that is loaded by the browser. \nIt loads the bundled VueJs application as a script.\nThe rendering of the application is then delegated to javascript.\n\nThe VueJs app is \"injected\" inside the `<div is=\"app\"></div>` element.\n\nThe bundled javascript script will be inserted in the `index.html` file in place of the comment : `<!-- built files will be auto injected -->`",
        "line": 19,
        "selection": {
          "start": {
            "line": 20,
            "character": 5
          },
          "end": {
            "line": 20,
            "character": 47
          }
        },
        "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\" />\n    <link rel=\"icon\" href=\"<%= BASE_URL %>favicon.ico\" />\n    <meta name=\"server-injected-data\" />\n  </head>\n\n  <body>\n    <noscript>\n      <strong\n        >We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work\n        properly without JavaScript enabled. Please enable it to\n        continue.</strong\n      >\n    </noscript>\n    <div id=\"app\"></div>\n    <!-- built files will be auto injected -->\n  </body>\n</html>\n"
      },
      {
        "file": "js/src/main.ts",
        "description": "## The `main.ts` VueJs entry point\n\nThis `main.ts` is the root Typescript file of the VueJs application.\n\nIt initializes the root component. It is automatically injected at the end of the [`\"public/index.html\"`](js/src/public/index.html) file after being bundled.\n\nIt will load the various required dependencies such as :\n\n- The `App.vue` entry point template\n- This entry point is fed with a few features such as\n  - A `router` to load the appropriate Vue components depending on the browser's URL\n  - `apolloProvider` to allow to communicate with the server GraphQL API\n  - `i18n` to handle text internationalization",
        "line": 35,
        "contents": "import Vue from \"vue\";\nimport Buefy from \"buefy\";\nimport Component from \"vue-class-component\";\nimport VueScrollTo from \"vue-scrollto\";\nimport VueMeta from \"vue-meta\";\nimport VTooltip from \"v-tooltip\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\nimport { NotifierPlugin } from \"./plugins/notifier\";\nimport filters from \"./filters\";\nimport { i18n } from \"./utils/i18n\";\nimport apolloProvider from \"./vue-apollo\";\nimport \"./registerServiceWorker\";\n\nVue.config.productionTip = false;\n\nVue.use(Buefy);\nVue.use(NotifierPlugin);\nVue.use(filters);\nVue.use(VueMeta);\nVue.use(VueScrollTo);\nVue.use(VTooltip);\n\n// Register the router hooks with their names\nComponent.registerHooks([\n  \"beforeRouteEnter\",\n  \"beforeRouteLeave\",\n  \"beforeRouteUpdate\", // for vue-router 2.2+\n]);\n\n/* eslint-disable no-new */\nnew Vue({\n  router,\n  apolloProvider,\n  el: \"#app\",\n  template: \"<App/>\",\n  components: { App },\n  render: (h) => h(App),\n  i18n,\n});\n"
      },
      {
        "file": "js/src/App.vue",
        "description": "## App.vue entry point and `<main>`\n\nThe `App.vue` is the entry point single file component (root component) of the Single Page Application (SPA).\n\nThe `<main>` component that is resolved by the router. The component `<router-view/>` is replaced depending on the view component resolved by the router.\n\nThe component to replace `<router-view/>` depends on the rules found in the [`router/index.ts`](js/src/router/index.ts) file.\n\n## Go further\n\n- [Single File Components](https://v3.vuejs.org/guide/single-file-component.html)\n- [Application root component](https://v3.vuejs.org/guide/instance.html#the-root-component)",
        "line": 25,
        "contents": "<template>\n  <div id=\"mobilizon\">\n    <NavBar />\n    <div v-if=\"config && config.demoMode\">\n      <b-message\n        class=\"container\"\n        type=\"is-danger\"\n        :title=\"$t('Warning').toLocaleUpperCase()\"\n        closable\n        aria-close-label=\"Close\"\n      >\n        <p>\n          {{ $t(\"This is a demonstration site to test Mobilizon.\") }}\n          <b>{{ $t(\"Please do not use it in any real way.\") }}</b>\n          {{\n            $t(\n              \"This website isn't moderated and the data that you enter will be automatically destroyed every day at 00:01 (Paris timezone).\"\n            )\n          }}\n        </p>\n      </b-message>\n    </div>\n    <error v-if=\"error\" :error=\"error\" />\n\n    <main v-else>\n      <transition name=\"fade\" mode=\"out-in\">\n        <router-view />\n      </transition>\n    </main>\n    <mobilizon-footer />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from \"vue-property-decorator\";\nimport NavBar from \"./components/NavBar.vue\";\nimport {\n  AUTH_ACCESS_TOKEN,\n  AUTH_USER_EMAIL,\n  AUTH_USER_ID,\n  AUTH_USER_ROLE,\n} from \"./constants\";\nimport {\n  CURRENT_USER_CLIENT,\n  UPDATE_CURRENT_USER_CLIENT,\n} from \"./graphql/user\";\nimport Footer from \"./components/Footer.vue\";\nimport Logo from \"./components/Logo.vue\";\nimport { initializeCurrentActor } from \"./utils/auth\";\nimport { CONFIG } from \"./graphql/config\";\nimport { IConfig } from \"./types/config.model\";\nimport { ICurrentUser } from \"./types/current-user.model\";\nimport jwt_decode, { JwtPayload } from \"jwt-decode\";\nimport { refreshAccessToken } from \"./apollo/utils\";\n\n@Component({\n  apollo: {\n    currentUser: CURRENT_USER_CLIENT,\n    config: CONFIG,\n  },\n  components: {\n    Logo,\n    NavBar,\n    error: () =>\n      import(/* webpackChunkName: \"editor\" */ \"./components/Error.vue\"),\n    \"mobilizon-footer\": Footer,\n  },\n  metaInfo() {\n    return {\n      titleTemplate: \"%s | Mobilizon\",\n    };\n  },\n})\nexport default class App extends Vue {\n  config!: IConfig;\n\n  currentUser!: ICurrentUser;\n\n  error: Error | null = null;\n\n  online = true;\n\n  interval: number | undefined = undefined;\n\n  async created(): Promise<void> {\n    if (await this.initializeCurrentUser()) {\n      await initializeCurrentActor(this.$apollo.provider.defaultClient);\n    }\n  }\n\n  errorCaptured(error: Error): void {\n    this.error = error;\n  }\n\n  private async initializeCurrentUser() {\n    const userId = localStorage.getItem(AUTH_USER_ID);\n    const userEmail = localStorage.getItem(AUTH_USER_EMAIL);\n    const accessToken = localStorage.getItem(AUTH_ACCESS_TOKEN);\n    const role = localStorage.getItem(AUTH_USER_ROLE);\n\n    if (userId && userEmail && accessToken && role) {\n      return this.$apollo.mutate({\n        mutation: UPDATE_CURRENT_USER_CLIENT,\n        variables: {\n          id: userId,\n          email: userEmail,\n          isLoggedIn: true,\n          role,\n        },\n      });\n    }\n    return false;\n  }\n\n  mounted(): void {\n    this.online = window.navigator.onLine;\n    window.addEventListener(\"offline\", () => {\n      this.online = false;\n      this.showOfflineNetworkWarning();\n      console.debug(\"offline\");\n    });\n    window.addEventListener(\"online\", () => {\n      this.online = true;\n      console.debug(\"online\");\n    });\n    document.addEventListener(\"refreshApp\", (event: Event) => {\n      this.$buefy.snackbar.open({\n        queue: false,\n        indefinite: true,\n        type: \"is-secondary\",\n        actionText: this.$t(\"Update app\") as string,\n        cancelText: this.$t(\"Ignore\") as string,\n        message: this.$t(\"A new version is available.\") as string,\n        onAction: async () => {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          const detail = event.detail;\n          const registration = detail as ServiceWorkerRegistration;\n          try {\n            await this.refreshApp(registration);\n            window.location.reload();\n          } catch (err) {\n            console.error(err);\n            this.$notifier.error(\n              this.$t(\n                \"An error has occured while refreshing the page.\"\n              ) as string\n            );\n          }\n        },\n      });\n    });\n\n    this.interval = setInterval(async () => {\n      const accessToken = localStorage.getItem(AUTH_ACCESS_TOKEN);\n      if (accessToken) {\n        const token = jwt_decode<JwtPayload>(accessToken);\n        if (\n          token?.exp !== undefined &&\n          new Date(token.exp * 1000 - 60000) < new Date()\n        ) {\n          refreshAccessToken(this.$apollo.getClient());\n        }\n      }\n    }, 60000);\n  }\n\n  private async refreshApp(\n    registration: ServiceWorkerRegistration\n  ): Promise<any> {\n    const worker = registration.waiting;\n    if (!worker) {\n      return Promise.resolve();\n    }\n    console.debug(\"Doing worker.skipWaiting().\");\n    return new Promise((resolve, reject) => {\n      const channel = new MessageChannel();\n\n      channel.port1.onmessage = (event) => {\n        console.debug(\"Done worker.skipWaiting().\");\n        if (event.data.error) {\n          reject(event.data);\n        } else {\n          resolve(event.data);\n        }\n      };\n      console.debug(\"calling skip waiting\");\n      worker?.postMessage({ type: \"skip-waiting\" }, [channel.port2]);\n    });\n  }\n\n  showOfflineNetworkWarning(): void {\n    this.$notifier.error(this.$t(\"You are offline\") as string);\n  }\n\n  unmounted(): void {\n    clearInterval(this.interval);\n    this.interval = undefined;\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n/* Icons */\n$mdi-font-path: \"~@mdi/font/fonts\";\n@import \"~@mdi/font/scss/materialdesignicons\";\n\n@import \"common\";\n\n#mobilizon {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n\n  main {\n    flex-grow: 1;\n  }\n}\n</style>\n"
      },
      {
        "file": "js/src/router/index.ts",
        "description": "## Basic URL routing\n\nIf the URL typed in the browser is `/` (ex. `https://mobilizon.fr/`),\nthe router resolves to the `Home` component.\nIt means that the `<main></main>` element of the [`App.vue`](./js/src/App.vue) entry point will be replaced with the [`views/Home.vue`](./js/src/views/Home.vue) component.\nSince it does not require authentication, even if no user is authenticated, the `Home` view will be rendered.\n\n### Go further\n\n- [Official VueJs routing documentation](https://vuejs.org/v2/guide/routing.html)",
        "line": 54,
        "contents": "import Vue from \"vue\";\nimport Router, { Route } from \"vue-router\";\nimport VueScrollTo from \"vue-scrollto\";\nimport { PositionResult } from \"vue-router/types/router.d\";\nimport { ImportedComponent } from \"vue/types/options\";\nimport Home from \"../views/Home.vue\";\nimport { eventRoutes } from \"./event\";\nimport { actorRoutes } from \"./actor\";\nimport { errorRoutes } from \"./error\";\nimport { authGuardIfNeeded } from \"./guards/auth-guard\";\nimport { settingsRoutes } from \"./settings\";\nimport { groupsRoutes } from \"./groups\";\nimport { discussionRoutes } from \"./discussion\";\nimport { userRoutes } from \"./user\";\nimport RouteName from \"./name\";\n\nVue.use(Router);\n\nfunction scrollBehavior(\n  to: Route,\n  from: Route,\n  savedPosition: any\n): PositionResult | undefined | null {\n  if (to.hash) {\n    VueScrollTo.scrollTo(to.hash, 700);\n    return {\n      selector: to.hash,\n      offset: { x: 0, y: 10 },\n    };\n  }\n  if (savedPosition) {\n    return savedPosition;\n  }\n\n  return { x: 0, y: 0 };\n}\n\nexport const routes = [\n  ...userRoutes,\n  ...eventRoutes,\n  ...settingsRoutes,\n  ...actorRoutes,\n  ...groupsRoutes,\n  ...discussionRoutes,\n  ...errorRoutes,\n  {\n    path: \"/search\",\n    name: RouteName.SEARCH,\n    component: (): Promise<ImportedComponent> =>\n      import(/* webpackChunkName: \"Search\" */ \"@/views/Search.vue\"),\n    props: true,\n    meta: { requiredAuth: false },\n  },\n  {\n    path: \"/\",\n    name: RouteName.HOME,\n    component: Home,\n    meta: { requiredAuth: false },\n  },\n  {\n    path: \"/about\",\n    name: RouteName.ABOUT,\n    component: (): Promise<ImportedComponent> =>\n      import(/* webpackChunkName: \"about\" */ \"@/views/About.vue\"),\n    meta: { requiredAuth: false },\n    redirect: { name: RouteName.ABOUT_INSTANCE },\n    children: [\n      {\n        path: \"instance\",\n        name: RouteName.ABOUT_INSTANCE,\n        component: (): Promise<ImportedComponent> =>\n          import(\n            /* webpackChunkName: \"about\" */ \"@/views/About/AboutInstance.vue\"\n          ),\n      },\n      {\n        path: \"/terms\",\n        name: RouteName.TERMS,\n        component: (): Promise<ImportedComponent> =>\n          import(/* webpackChunkName: \"cookies\" */ \"@/views/About/Terms.vue\"),\n        meta: { requiredAuth: false },\n      },\n      {\n        path: \"/privacy\",\n        name: RouteName.PRIVACY,\n        component: (): Promise<ImportedComponent> =>\n          import(/* webpackChunkName: \"cookies\" */ \"@/views/About/Privacy.vue\"),\n        meta: { requiredAuth: false },\n      },\n      {\n        path: \"/rules\",\n        name: RouteName.RULES,\n        component: (): Promise<ImportedComponent> =>\n          import(/* webpackChunkName: \"cookies\" */ \"@/views/About/Rules.vue\"),\n        meta: { requiredAuth: false },\n      },\n      {\n        path: \"/glossary\",\n        name: RouteName.GLOSSARY,\n        component: (): Promise<ImportedComponent> =>\n          import(\n            /* webpackChunkName: \"cookies\" */ \"@/views/About/Glossary.vue\"\n          ),\n        meta: { requiredAuth: false },\n      },\n    ],\n  },\n  {\n    path: \"/interact\",\n    name: RouteName.INTERACT,\n    component: (): Promise<ImportedComponent> =>\n      import(/* webpackChunkName: \"interact\" */ \"@/views/Interact.vue\"),\n    meta: { requiredAuth: false },\n  },\n  {\n    path: \"/auth/:provider/callback\",\n    name: \"auth-callback\",\n    component: (): Promise<ImportedComponent> =>\n      import(\n        /* webpackChunkName: \"ProviderValidation\" */ \"@/views/User/ProviderValidation.vue\"\n      ),\n  },\n  {\n    path: \"/welcome/:step?\",\n    name: RouteName.WELCOME_SCREEN,\n    component: (): Promise<ImportedComponent> =>\n      import(\n        /* webpackChunkName: \"WelcomeScreen\" */ \"@/views/User/SettingsOnboard.vue\"\n      ),\n    meta: { requiredAuth: true },\n    props: (route: Route): Record<string, unknown> => {\n      const step = Number.parseInt(route.params.step, 10);\n      if (Number.isNaN(step)) {\n        return { step: 1 };\n      }\n      return { step };\n    },\n  },\n  {\n    path: \"/404\",\n    name: RouteName.PAGE_NOT_FOUND,\n    component: (): Promise<ImportedComponent> =>\n      import(\n        /* webpackChunkName: \"PageNotFound\" */ \"../views/PageNotFound.vue\"\n      ),\n    meta: { requiredAuth: false },\n  },\n  {\n    path: \"*\",\n    redirect: { name: RouteName.PAGE_NOT_FOUND },\n  },\n];\n\nconst router = new Router({\n  scrollBehavior,\n  mode: \"history\",\n  base: \"/\",\n  routes,\n});\n\nrouter.beforeEach(authGuardIfNeeded);\nrouter.afterEach(() => {\n  try {\n    if (router.app.$children[0]) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      router.app.$children[0].error = null;\n    }\n  } catch (e) {\n    console.error(e);\n  }\n});\n\nexport default router;\n"
      },
      {
        "file": "js/src/views/Home.vue",
        "description": "## Conditional rendering\n\nThe `v-if` directive tells if an element is rendered or not.\n\nFor instance, if the user is not registered of logged in, this section is shown.\nTo know if the user is registered of logged in, `config` and `currentUser` variables are looked up.\n\nThe presence of `currentUser` variable is the result of a GraphQL query (see `CURRENT_USER_CLIENT`).\nThe presence of `config` variable is the result of a GraphQL query (see `CONFIG`).\n\n\n### Go further\n\n- [Official VueJs conditional rendering documentation](https://vuejs.org/v2/guide/conditional.html)",
        "line": 3,
        "contents": "<template>\n  <div id=\"homepage\">\n    <section\n      class=\"hero\"\n      :class=\"{ webp: supportsWebPFormat }\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <div class=\"hero-body\">\n        <div class=\"container\">\n          <h1 class=\"title\">\n            {{ config.slogan || $t(\"Gather ⋅ Organize ⋅ Mobilize\") }}\n          </h1>\n          <p\n            v-html=\"\n              $t('Join <b>{instance}</b>, a Mobilizon instance', {\n                instance: config.name,\n              })\n            \"\n          />\n          <p class=\"instance-description\">{{ config.description }}</p>\n          <!-- We don't invite to find other instances yet -->\n          <!-- <p v-if=\"!config.registrationsOpen\">\n              {{ $t(\"This instance isn't opened to registrations, but you can register on other instances.\") }}\n          </p>-->\n          <b-message type=\"is-danger\" v-if=\"!config.registrationsOpen\">{{\n            $t(\"Unfortunately, this instance isn't opened to registrations\")\n          }}</b-message>\n          <div class=\"buttons\">\n            <b-button\n              type=\"is-primary\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.REGISTER }\"\n              v-if=\"config.registrationsOpen\"\n              >{{ $t(\"Create an account\") }}</b-button\n            >\n            <!-- We don't invite to find other instances yet -->\n            <!-- <b-button v-else type=\"is-link\" tag=\"a\" href=\"https://joinmastodon.org\">{{ $t('Find an instance') }}</b-button> -->\n            <b-button\n              type=\"is-text\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.ABOUT }\"\n            >\n              {{ $t(\"Learn more about {instance}\", { instance: config.name }) }}\n            </b-button>\n          </div>\n        </div>\n      </div>\n    </section>\n    <div\n      id=\"recent_events\"\n      class=\"container section\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <EventCard :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\">{{\n          $t(\"No events found\")\n        }}</b-message>\n      </section>\n    </div>\n    <div id=\"picture\" v-if=\"config && (!currentUser.id || !currentActor.id)\">\n      <div class=\"picture-container\">\n        <picture>\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <img\n            src=\"/img/pics/homepage-1024w.jpg\"\n            width=\"3840\"\n            height=\"2719\"\n            alt=\"\"\n            loading=\"lazy\"\n          />\n        </picture>\n      </div>\n      <div class=\"container section\">\n        <div class=\"columns\">\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A practical tool\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is a tool that helps you <b>find, create and organise events</b>.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"An ethical alternative\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Ethical alternative to Facebook events, groups and pages, Mobilizon is a <b>tool designed to serve you</b>. Period.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A federated software\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is not a giant platform, but a <b>multitude of interconnected Mobilizon websites</b>.'\n                )\n              \"\n            />\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <a\n            class=\"button is-primary is-large\"\n            href=\"https://joinmobilizon.org\"\n            >{{ $t(\"Learn more about Mobilizon\") }}</a\n          >\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"container section\"\n      v-if=\"config && loggedUser && loggedUser.settings\"\n    >\n      <section v-if=\"currentActor.id && (welcomeBack || newRegisteredUser)\">\n        <b-message type=\"is-info\" v-if=\"welcomeBack\">{{\n          $t(\"Welcome back {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n        <b-message type=\"is-info\" v-if=\"newRegisteredUser\">{{\n          $t(\"Welcome to Mobilizon, {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n      </section>\n      <!-- Your upcoming events -->\n      <section v-if=\"canShowMyUpcomingEvents\">\n        <h2 class=\"title\">{{ $t(\"Your upcoming events\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-for=\"row of goingToEvents\" class=\"upcoming-events\" :key=\"row[0]\">\n          <p\n            class=\"date-component-container\"\n            v-if=\"isInLessThanSevenDays(row[0])\"\n          >\n            <span v-if=\"isToday(row[0])\">{{\n              $tc(\"You have one event today.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isTomorrow(row[0])\">{{\n              $tc(\"You have one event tomorrow.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isInLessThanSevenDays(row[0])\">\n              {{\n                $tc(\"You have one event in {days} days.\", row[1].length, {\n                  count: row[1].length,\n                  days: calculateDiffDays(row[0]),\n                })\n              }}\n            </span>\n          </p>\n          <div>\n            <EventListCard\n              v-for=\"participation in thisWeek(row)\"\n              @event-deleted=\"eventDeleted\"\n              :key=\"participation[1].id\"\n              :participation=\"participation[1]\"\n            />\n          </div>\n        </div>\n        <span class=\"view-all\">\n          <router-link :to=\"{ name: RouteName.MY_EVENTS }\"\n            >{{ $t(\"View everything\") }} >></router-link\n          >\n        </span>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowMyUpcomingEvents && canShowLastWeekEvents\"\n      />\n      <!-- Last week events -->\n      <section v-if=\"canShowLastWeekEvents\">\n        <h2 class=\"title\">{{ $t(\"Last week\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div>\n          <EventListCard\n            v-for=\"participation in lastWeekEvents\"\n            :key=\"participation.id\"\n            :participation=\"participation\"\n            @event-deleted=\"eventDeleted\"\n            :options=\"{ hideDate: false }\"\n          />\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowLastWeekEvents && canShowCloseEvents\"\n      />\n      <!-- Events close to you -->\n      <section class=\"events-close\" v-if=\"canShowCloseEvents\">\n        <h2 class=\"title\">\n          {{ $t(\"Events nearby\") }}\n        </h2>\n        <p>\n          {{\n            $tc(\n              \"Within {number} kilometers of {place}\",\n              loggedUser.settings.location.range,\n              {\n                number: loggedUser.settings.location.range,\n                place: loggedUser.settings.location.name,\n              }\n            )\n          }}\n          <router-link\n            :to=\"{ name: RouteName.PREFERENCES }\"\n            :title=\"$t('Change')\"\n          >\n            <b-icon class=\"clickable\" icon=\"pencil\" size=\"is-small\" />\n          </router-link>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <div class=\"columns is-multiline\">\n          <div\n            class=\"column is-one-third-desktop\"\n            v-for=\"event in closeEvents.elements.slice(0, 3)\"\n            :key=\"event.uuid\"\n          >\n            <event-card :event=\"event\" />\n          </div>\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"\n          canShowMyUpcomingEvents || canShowLastWeekEvents || canShowCloseEvents\n        \"\n      />\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <recent-event-card-wrapper :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\"\n          >{{ $t(\"No events found\") }}<br />\n          <div v-if=\"goingToEvents.size > 0 || lastWeekEvents.length > 0\">\n            <b-icon size=\"is-small\" icon=\"information-outline\" />\n            <small>{{\n              $t(\"The events you created are not shown here.\")\n            }}</small>\n          </div>\n        </b-message>\n      </section>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\nimport { EventSortField, ParticipantRole, SortDirection } from \"@/types/enums\";\nimport { Paginate } from \"@/types/paginate\";\nimport { supportsWebPFormat } from \"@/utils/support\";\nimport { IParticipant, Participant } from \"../types/participant.model\";\nimport { CLOSE_EVENTS, FETCH_EVENTS } from \"../graphql/event\";\nimport EventListCard from \"../components/Event/EventListCard.vue\";\nimport EventCard from \"../components/Event/EventCard.vue\";\nimport RecentEventCardWrapper from \"../components/Event/RecentEventCardWrapper.vue\";\nimport {\n  CURRENT_ACTOR_CLIENT,\n  LOGGED_USER_PARTICIPATIONS,\n} from \"../graphql/actor\";\nimport { IPerson, Person } from \"../types/actor\";\nimport { ICurrentUser, IUser } from \"../types/current-user.model\";\nimport { CURRENT_USER_CLIENT, USER_SETTINGS } from \"../graphql/user\";\nimport RouteName from \"../router/name\";\nimport { IEvent } from \"../types/event.model\";\nimport DateComponent from \"../components/Event/DateCalendarIcon.vue\";\nimport { CONFIG } from \"../graphql/config\";\nimport { IConfig } from \"../types/config.model\";\nimport Subtitle from \"../components/Utils/Subtitle.vue\";\n\n@Component({\n  apollo: {\n    events: {\n      query: FETCH_EVENTS,\n      fetchPolicy: \"no-cache\", // Debug me: https://github.com/apollographql/apollo-client/issues/3030\n      variables: {\n        orderBy: EventSortField.INSERTED_AT,\n        direction: SortDirection.DESC,\n      },\n    },\n    currentActor: {\n      query: CURRENT_ACTOR_CLIENT,\n      update: (data) => new Person(data.currentActor),\n    },\n    currentUser: CURRENT_USER_CLIENT,\n    loggedUser: {\n      query: USER_SETTINGS,\n      fetchPolicy: \"network-only\",\n      skip() {\n        return !this.currentUser || this.currentUser.isLoggedIn === false;\n      },\n      error() {\n        return null;\n      },\n    },\n    config: CONFIG,\n    currentUserParticipations: {\n      query: LOGGED_USER_PARTICIPATIONS,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        const lastWeek = new Date();\n        lastWeek.setDate(new Date().getDate() - 7);\n        return {\n          afterDateTime: lastWeek.toISOString(),\n        };\n      },\n      update: (data) =>\n        data.loggedUser.participations.elements.map(\n          (participation: IParticipant) => new Participant(participation)\n        ),\n      skip() {\n        return this.currentUser?.isLoggedIn === false;\n      },\n    },\n    closeEvents: {\n      query: CLOSE_EVENTS,\n      variables() {\n        return {\n          location: this.loggedUser?.settings?.location?.geohash,\n          radius: this.loggedUser?.settings?.location?.range,\n        };\n      },\n      update: (data) => data.searchEvents,\n      skip() {\n        return (\n          !this.currentUser?.isLoggedIn ||\n          !this.loggedUser?.settings?.location?.geohash ||\n          !this.loggedUser?.settings?.location?.range\n        );\n      },\n    },\n  },\n  components: {\n    Subtitle,\n    DateComponent,\n    EventListCard,\n    EventCard,\n    RecentEventCardWrapper,\n    \"settings-onboard\": () => import(\"./User/SettingsOnboard.vue\"),\n  },\n  metaInfo() {\n    return {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      title: this.instanceName,\n      titleTemplate: \"%s | Mobilizon\",\n    };\n  },\n})\nexport default class Home extends Vue {\n  events: Paginate<IEvent> = {\n    elements: [],\n    total: 0,\n  };\n\n  locations = [];\n\n  city = { name: null };\n\n  country = { name: null };\n\n  currentUser!: IUser;\n\n  loggedUser!: ICurrentUser;\n\n  currentActor!: IPerson;\n\n  config!: IConfig;\n\n  RouteName = RouteName;\n\n  currentUserParticipations: IParticipant[] = [];\n\n  supportsWebPFormat = supportsWebPFormat;\n\n  closeEvents: Paginate<IEvent> = { elements: [], total: 0 };\n\n  // get displayed_name() {\n  //   return this.loggedPerson && this.loggedPerson.name === null\n  //     ? this.loggedPerson.preferredUsername\n  //     : this.loggedPerson.name;\n  // }\n\n  get instanceName(): string | undefined {\n    if (!this.config) return undefined;\n    return this.config.name;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get welcomeBack(): boolean {\n    return window.localStorage.getItem(\"welcome-back\") === \"yes\";\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get newRegisteredUser(): boolean {\n    return window.localStorage.getItem(\"new-registered-user\") === \"yes\";\n  }\n\n  thisWeek(\n    row: [string, Map<string, IParticipant>]\n  ): Map<string, IParticipant> {\n    if (this.isInLessThanSevenDays(row[0])) {\n      return row[1];\n    }\n    return new Map();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  mounted(): void {\n    if (window.localStorage.getItem(\"welcome-back\")) {\n      window.localStorage.removeItem(\"welcome-back\");\n    }\n    if (window.localStorage.getItem(\"new-registered-user\")) {\n      window.localStorage.removeItem(\"new-registered-user\");\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isToday(date: Date): boolean {\n    return new Date(date).toDateString() === new Date().toDateString();\n  }\n\n  isTomorrow(date: string): boolean {\n    return this.isInDays(date, 1);\n  }\n\n  isInDays(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) === nbDays;\n  }\n\n  isBefore(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) < nbDays;\n  }\n\n  isAfter(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) >= nbDays;\n  }\n\n  isInLessThanSevenDays(date: string): boolean {\n    return this.isBefore(date, 7);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  calculateDiffDays(date: string): number {\n    return Math.ceil(\n      (new Date(date).getTime() - new Date().getTime()) / 1000 / 60 / 60 / 24\n    );\n  }\n\n  get thisWeekGoingToEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isAfter(event.beginsOn.toDateString(), 0) &&\n        this.isBefore(event.beginsOn.toDateString(), 7) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  get goingToEvents(): Map<string, Map<string, IParticipant>> {\n    return this.thisWeekGoingToEvents.reduce(\n      (\n        acc: Map<string, Map<string, IParticipant>>,\n        participation: IParticipant\n      ) => {\n        const day = new Date(participation.event.beginsOn).toDateString();\n        const participations: Map<string, IParticipant> =\n          acc.get(day) || new Map();\n        participations.set(\n          `${participation.event.uuid}${participation.actor.id}`,\n          participation\n        );\n        acc.set(day, participations);\n        return acc;\n      },\n      new Map()\n    );\n  }\n\n  get lastWeekEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isBefore(event.beginsOn.toDateString(), 0) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  eventDeleted(eventid: string): void {\n    this.currentUserParticipations = this.currentUserParticipations.filter(\n      (participation) => participation.event.id !== eventid\n    );\n  }\n\n  viewEvent(event: IEvent): void {\n    this.$router.push({ name: RouteName.EVENT, params: { uuid: event.uuid } });\n  }\n\n  @Watch(\"loggedUser\")\n  detectEmptyUserSettings(loggedUser: IUser): void {\n    if (loggedUser && loggedUser.id && loggedUser.settings === null) {\n      this.$router.push({\n        name: RouteName.WELCOME_SCREEN,\n        params: { step: \"1\" },\n      });\n    }\n  }\n\n  get canShowMyUpcomingEvents(): boolean {\n    return this.currentActor.id != undefined && this.goingToEvents.size > 0;\n  }\n\n  get canShowLastWeekEvents(): boolean {\n    return this.currentActor && this.lastWeekEvents.length > 0;\n  }\n\n  get canShowCloseEvents(): boolean {\n    return this.closeEvents.total > 0;\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"~bulma/sass/utilities/mixins.sass\";\n\nmain > div > .container {\n  background: $white;\n  padding: 1rem 0.5rem 3rem;\n}\n\n.search-autocomplete {\n  border: 1px solid #dbdbdb;\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.events-recent {\n  & > h3 {\n    padding-left: 0.75rem;\n  }\n\n  .columns {\n    margin: 1rem auto 0;\n  }\n}\n\n.date-component-container {\n  display: flex;\n  align-items: center;\n  margin: 0.5rem auto 1rem;\n\n  h3.subtitle {\n    margin-left: 7px;\n  }\n}\n\nspan.view-all {\n  display: block;\n  margin-top: 1rem;\n  text-align: right;\n\n  a {\n    text-decoration: underline;\n  }\n}\n\nsection.hero {\n  position: relative;\n  z-index: 1;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.3;\n    z-index: -1;\n    background: url(\"../../public/img/pics/homepage_background-1024w.png\");\n    background-size: cover;\n  }\n  &.webp::before {\n    background-image: url(\"../../public/img/pics/homepage_background-1024w.webp\");\n  }\n\n  & > .hero-body {\n    padding: 1rem 1.5rem 3rem;\n  }\n\n  .title {\n    color: $background-color;\n  }\n\n  .column figure.image img {\n    max-width: 400px;\n  }\n\n  .instance-description {\n    margin-bottom: 1rem;\n  }\n}\n\n#recent_events {\n  padding: 0;\n  min-height: 20vh;\n  z-index: 10;\n\n  .title {\n    margin: 20px auto 0;\n  }\n\n  .columns {\n    margin: 0 auto;\n  }\n}\n\n#picture {\n  .picture-container {\n    position: relative;\n    &::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 1;\n    }\n\n    & > img {\n      object-fit: cover;\n      max-height: 80vh;\n      display: block;\n      margin: auto;\n      width: 100%;\n    }\n  }\n\n  .container.section {\n    background: $white;\n\n    @include tablet {\n      margin-top: -4rem;\n    }\n    z-index: 10;\n\n    .title {\n      margin: 0 0 10px;\n      font-size: 30px;\n    }\n\n    .buttons {\n      justify-content: center;\n      margin-top: 2rem;\n    }\n  }\n}\n\n#homepage {\n  background: $white;\n}\n\n.home-separator {\n  background-color: $orange-2;\n}\n\n.clickable {\n  cursor: pointer;\n}\n\n.title {\n  font-size: 27px;\n  &:not(:last-child) {\n    margin-bottom: 0.5rem;\n  }\n}\n</style>\n"
      },
      {
        "file": "js/src/views/Home.vue",
        "description": "## GraphQL data fetching using apollo\n\nThis `@Component` annotation and the `apollo` attribute describes the GraphQL queries upon which the component relies on to be rendered.\n\nData such as the following may be fetched from GraphQL:\n\n- `events` : A list of Mobilizon Events\n- `currentActor` : Informations about the current actor connected\n- `currentUser` : Informations about the current user connected\n- `loggedUser` : A flag to know if a user is logged-in\n- `config` : Configuration that could be retrieved about the server\n- `currentUserParticipations` : Events in which the current user takes part\n- `closeEvents` : Events that are geographically close to the user's location",
        "line": 371,
        "selection": {
          "start": {
            "line": 414,
            "character": 5
          },
          "end": {
            "line": 414,
            "character": 16
          }
        },
        "contents": "<template>\n  <div id=\"homepage\">\n    <section\n      class=\"hero\"\n      :class=\"{ webp: supportsWebPFormat }\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <div class=\"hero-body\">\n        <div class=\"container\">\n          <h1 class=\"title\">\n            {{ config.slogan || $t(\"Gather ⋅ Organize ⋅ Mobilize\") }}\n          </h1>\n          <p\n            v-html=\"\n              $t('Join <b>{instance}</b>, a Mobilizon instance', {\n                instance: config.name,\n              })\n            \"\n          />\n          <p class=\"instance-description\">{{ config.description }}</p>\n          <!-- We don't invite to find other instances yet -->\n          <!-- <p v-if=\"!config.registrationsOpen\">\n              {{ $t(\"This instance isn't opened to registrations, but you can register on other instances.\") }}\n          </p>-->\n          <b-message type=\"is-danger\" v-if=\"!config.registrationsOpen\">{{\n            $t(\"Unfortunately, this instance isn't opened to registrations\")\n          }}</b-message>\n          <div class=\"buttons\">\n            <b-button\n              type=\"is-primary\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.REGISTER }\"\n              v-if=\"config.registrationsOpen\"\n              >{{ $t(\"Create an account\") }}</b-button\n            >\n            <!-- We don't invite to find other instances yet -->\n            <!-- <b-button v-else type=\"is-link\" tag=\"a\" href=\"https://joinmastodon.org\">{{ $t('Find an instance') }}</b-button> -->\n            <b-button\n              type=\"is-text\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.ABOUT }\"\n            >\n              {{ $t(\"Learn more about {instance}\", { instance: config.name }) }}\n            </b-button>\n          </div>\n        </div>\n      </div>\n    </section>\n    <div\n      id=\"recent_events\"\n      class=\"container section\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <EventCard :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\">{{\n          $t(\"No events found\")\n        }}</b-message>\n      </section>\n    </div>\n    <div id=\"picture\" v-if=\"config && (!currentUser.id || !currentActor.id)\">\n      <div class=\"picture-container\">\n        <picture>\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <img\n            src=\"/img/pics/homepage-1024w.jpg\"\n            width=\"3840\"\n            height=\"2719\"\n            alt=\"\"\n            loading=\"lazy\"\n          />\n        </picture>\n      </div>\n      <div class=\"container section\">\n        <div class=\"columns\">\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A practical tool\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is a tool that helps you <b>find, create and organise events</b>.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"An ethical alternative\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Ethical alternative to Facebook events, groups and pages, Mobilizon is a <b>tool designed to serve you</b>. Period.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A federated software\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is not a giant platform, but a <b>multitude of interconnected Mobilizon websites</b>.'\n                )\n              \"\n            />\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <a\n            class=\"button is-primary is-large\"\n            href=\"https://joinmobilizon.org\"\n            >{{ $t(\"Learn more about Mobilizon\") }}</a\n          >\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"container section\"\n      v-if=\"config && loggedUser && loggedUser.settings\"\n    >\n      <section v-if=\"currentActor.id && (welcomeBack || newRegisteredUser)\">\n        <b-message type=\"is-info\" v-if=\"welcomeBack\">{{\n          $t(\"Welcome back {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n        <b-message type=\"is-info\" v-if=\"newRegisteredUser\">{{\n          $t(\"Welcome to Mobilizon, {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n      </section>\n      <!-- Your upcoming events -->\n      <section v-if=\"canShowMyUpcomingEvents\">\n        <h2 class=\"title\">{{ $t(\"Your upcoming events\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-for=\"row of goingToEvents\" class=\"upcoming-events\" :key=\"row[0]\">\n          <p\n            class=\"date-component-container\"\n            v-if=\"isInLessThanSevenDays(row[0])\"\n          >\n            <span v-if=\"isToday(row[0])\">{{\n              $tc(\"You have one event today.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isTomorrow(row[0])\">{{\n              $tc(\"You have one event tomorrow.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isInLessThanSevenDays(row[0])\">\n              {{\n                $tc(\"You have one event in {days} days.\", row[1].length, {\n                  count: row[1].length,\n                  days: calculateDiffDays(row[0]),\n                })\n              }}\n            </span>\n          </p>\n          <div>\n            <EventListCard\n              v-for=\"participation in thisWeek(row)\"\n              @event-deleted=\"eventDeleted\"\n              :key=\"participation[1].id\"\n              :participation=\"participation[1]\"\n            />\n          </div>\n        </div>\n        <span class=\"view-all\">\n          <router-link :to=\"{ name: RouteName.MY_EVENTS }\"\n            >{{ $t(\"View everything\") }} >></router-link\n          >\n        </span>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowMyUpcomingEvents && canShowLastWeekEvents\"\n      />\n      <!-- Last week events -->\n      <section v-if=\"canShowLastWeekEvents\">\n        <h2 class=\"title\">{{ $t(\"Last week\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div>\n          <EventListCard\n            v-for=\"participation in lastWeekEvents\"\n            :key=\"participation.id\"\n            :participation=\"participation\"\n            @event-deleted=\"eventDeleted\"\n            :options=\"{ hideDate: false }\"\n          />\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowLastWeekEvents && canShowCloseEvents\"\n      />\n      <!-- Events close to you -->\n      <section class=\"events-close\" v-if=\"canShowCloseEvents\">\n        <h2 class=\"title\">\n          {{ $t(\"Events nearby\") }}\n        </h2>\n        <p>\n          {{\n            $tc(\n              \"Within {number} kilometers of {place}\",\n              loggedUser.settings.location.range,\n              {\n                number: loggedUser.settings.location.range,\n                place: loggedUser.settings.location.name,\n              }\n            )\n          }}\n          <router-link\n            :to=\"{ name: RouteName.PREFERENCES }\"\n            :title=\"$t('Change')\"\n          >\n            <b-icon class=\"clickable\" icon=\"pencil\" size=\"is-small\" />\n          </router-link>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <div class=\"columns is-multiline\">\n          <div\n            class=\"column is-one-third-desktop\"\n            v-for=\"event in closeEvents.elements.slice(0, 3)\"\n            :key=\"event.uuid\"\n          >\n            <event-card :event=\"event\" />\n          </div>\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"\n          canShowMyUpcomingEvents || canShowLastWeekEvents || canShowCloseEvents\n        \"\n      />\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <recent-event-card-wrapper :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\"\n          >{{ $t(\"No events found\") }}<br />\n          <div v-if=\"goingToEvents.size > 0 || lastWeekEvents.length > 0\">\n            <b-icon size=\"is-small\" icon=\"information-outline\" />\n            <small>{{\n              $t(\"The events you created are not shown here.\")\n            }}</small>\n          </div>\n        </b-message>\n      </section>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\nimport { EventSortField, ParticipantRole, SortDirection } from \"@/types/enums\";\nimport { Paginate } from \"@/types/paginate\";\nimport { supportsWebPFormat } from \"@/utils/support\";\nimport { IParticipant, Participant } from \"../types/participant.model\";\nimport { CLOSE_EVENTS, FETCH_EVENTS } from \"../graphql/event\";\nimport EventListCard from \"../components/Event/EventListCard.vue\";\nimport EventCard from \"../components/Event/EventCard.vue\";\nimport RecentEventCardWrapper from \"../components/Event/RecentEventCardWrapper.vue\";\nimport {\n  CURRENT_ACTOR_CLIENT,\n  LOGGED_USER_PARTICIPATIONS,\n} from \"../graphql/actor\";\nimport { IPerson, Person } from \"../types/actor\";\nimport { ICurrentUser, IUser } from \"../types/current-user.model\";\nimport { CURRENT_USER_CLIENT, USER_SETTINGS } from \"../graphql/user\";\nimport RouteName from \"../router/name\";\nimport { IEvent } from \"../types/event.model\";\nimport DateComponent from \"../components/Event/DateCalendarIcon.vue\";\nimport { CONFIG } from \"../graphql/config\";\nimport { IConfig } from \"../types/config.model\";\nimport Subtitle from \"../components/Utils/Subtitle.vue\";\n\n@Component({\n  apollo: {\n    events: {\n      query: FETCH_EVENTS,\n      fetchPolicy: \"no-cache\", // Debug me: https://github.com/apollographql/apollo-client/issues/3030\n      variables: {\n        orderBy: EventSortField.INSERTED_AT,\n        direction: SortDirection.DESC,\n      },\n    },\n    currentActor: {\n      query: CURRENT_ACTOR_CLIENT,\n      update: (data) => new Person(data.currentActor),\n    },\n    currentUser: CURRENT_USER_CLIENT,\n    loggedUser: {\n      query: USER_SETTINGS,\n      fetchPolicy: \"network-only\",\n      skip() {\n        return !this.currentUser || this.currentUser.isLoggedIn === false;\n      },\n      error() {\n        return null;\n      },\n    },\n    config: CONFIG,\n    currentUserParticipations: {\n      query: LOGGED_USER_PARTICIPATIONS,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        const lastWeek = new Date();\n        lastWeek.setDate(new Date().getDate() - 7);\n        return {\n          afterDateTime: lastWeek.toISOString(),\n        };\n      },\n      update: (data) =>\n        data.loggedUser.participations.elements.map(\n          (participation: IParticipant) => new Participant(participation)\n        ),\n      skip() {\n        return this.currentUser?.isLoggedIn === false;\n      },\n    },\n    closeEvents: {\n      query: CLOSE_EVENTS,\n      variables() {\n        return {\n          location: this.loggedUser?.settings?.location?.geohash,\n          radius: this.loggedUser?.settings?.location?.range,\n        };\n      },\n      update: (data) => data.searchEvents,\n      skip() {\n        return (\n          !this.currentUser?.isLoggedIn ||\n          !this.loggedUser?.settings?.location?.geohash ||\n          !this.loggedUser?.settings?.location?.range\n        );\n      },\n    },\n  },\n  components: {\n    Subtitle,\n    DateComponent,\n    EventListCard,\n    EventCard,\n    RecentEventCardWrapper,\n    \"settings-onboard\": () => import(\"./User/SettingsOnboard.vue\"),\n  },\n  metaInfo() {\n    return {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      title: this.instanceName,\n      titleTemplate: \"%s | Mobilizon\",\n    };\n  },\n})\nexport default class Home extends Vue {\n  events: Paginate<IEvent> = {\n    elements: [],\n    total: 0,\n  };\n\n  locations = [];\n\n  city = { name: null };\n\n  country = { name: null };\n\n  currentUser!: IUser;\n\n  loggedUser!: ICurrentUser;\n\n  currentActor!: IPerson;\n\n  config!: IConfig;\n\n  RouteName = RouteName;\n\n  currentUserParticipations: IParticipant[] = [];\n\n  supportsWebPFormat = supportsWebPFormat;\n\n  closeEvents: Paginate<IEvent> = { elements: [], total: 0 };\n\n  // get displayed_name() {\n  //   return this.loggedPerson && this.loggedPerson.name === null\n  //     ? this.loggedPerson.preferredUsername\n  //     : this.loggedPerson.name;\n  // }\n\n  get instanceName(): string | undefined {\n    if (!this.config) return undefined;\n    return this.config.name;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get welcomeBack(): boolean {\n    return window.localStorage.getItem(\"welcome-back\") === \"yes\";\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get newRegisteredUser(): boolean {\n    return window.localStorage.getItem(\"new-registered-user\") === \"yes\";\n  }\n\n  thisWeek(\n    row: [string, Map<string, IParticipant>]\n  ): Map<string, IParticipant> {\n    if (this.isInLessThanSevenDays(row[0])) {\n      return row[1];\n    }\n    return new Map();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  mounted(): void {\n    if (window.localStorage.getItem(\"welcome-back\")) {\n      window.localStorage.removeItem(\"welcome-back\");\n    }\n    if (window.localStorage.getItem(\"new-registered-user\")) {\n      window.localStorage.removeItem(\"new-registered-user\");\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isToday(date: Date): boolean {\n    return new Date(date).toDateString() === new Date().toDateString();\n  }\n\n  isTomorrow(date: string): boolean {\n    return this.isInDays(date, 1);\n  }\n\n  isInDays(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) === nbDays;\n  }\n\n  isBefore(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) < nbDays;\n  }\n\n  isAfter(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) >= nbDays;\n  }\n\n  isInLessThanSevenDays(date: string): boolean {\n    return this.isBefore(date, 7);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  calculateDiffDays(date: string): number {\n    return Math.ceil(\n      (new Date(date).getTime() - new Date().getTime()) / 1000 / 60 / 60 / 24\n    );\n  }\n\n  get thisWeekGoingToEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isAfter(event.beginsOn.toDateString(), 0) &&\n        this.isBefore(event.beginsOn.toDateString(), 7) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  get goingToEvents(): Map<string, Map<string, IParticipant>> {\n    return this.thisWeekGoingToEvents.reduce(\n      (\n        acc: Map<string, Map<string, IParticipant>>,\n        participation: IParticipant\n      ) => {\n        const day = new Date(participation.event.beginsOn).toDateString();\n        const participations: Map<string, IParticipant> =\n          acc.get(day) || new Map();\n        participations.set(\n          `${participation.event.uuid}${participation.actor.id}`,\n          participation\n        );\n        acc.set(day, participations);\n        return acc;\n      },\n      new Map()\n    );\n  }\n\n  get lastWeekEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isBefore(event.beginsOn.toDateString(), 0) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  eventDeleted(eventid: string): void {\n    this.currentUserParticipations = this.currentUserParticipations.filter(\n      (participation) => participation.event.id !== eventid\n    );\n  }\n\n  viewEvent(event: IEvent): void {\n    this.$router.push({ name: RouteName.EVENT, params: { uuid: event.uuid } });\n  }\n\n  @Watch(\"loggedUser\")\n  detectEmptyUserSettings(loggedUser: IUser): void {\n    if (loggedUser && loggedUser.id && loggedUser.settings === null) {\n      this.$router.push({\n        name: RouteName.WELCOME_SCREEN,\n        params: { step: \"1\" },\n      });\n    }\n  }\n\n  get canShowMyUpcomingEvents(): boolean {\n    return this.currentActor.id != undefined && this.goingToEvents.size > 0;\n  }\n\n  get canShowLastWeekEvents(): boolean {\n    return this.currentActor && this.lastWeekEvents.length > 0;\n  }\n\n  get canShowCloseEvents(): boolean {\n    return this.closeEvents.total > 0;\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"~bulma/sass/utilities/mixins.sass\";\n\nmain > div > .container {\n  background: $white;\n  padding: 1rem 0.5rem 3rem;\n}\n\n.search-autocomplete {\n  border: 1px solid #dbdbdb;\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.events-recent {\n  & > h3 {\n    padding-left: 0.75rem;\n  }\n\n  .columns {\n    margin: 1rem auto 0;\n  }\n}\n\n.date-component-container {\n  display: flex;\n  align-items: center;\n  margin: 0.5rem auto 1rem;\n\n  h3.subtitle {\n    margin-left: 7px;\n  }\n}\n\nspan.view-all {\n  display: block;\n  margin-top: 1rem;\n  text-align: right;\n\n  a {\n    text-decoration: underline;\n  }\n}\n\nsection.hero {\n  position: relative;\n  z-index: 1;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.3;\n    z-index: -1;\n    background: url(\"../../public/img/pics/homepage_background-1024w.png\");\n    background-size: cover;\n  }\n  &.webp::before {\n    background-image: url(\"../../public/img/pics/homepage_background-1024w.webp\");\n  }\n\n  & > .hero-body {\n    padding: 1rem 1.5rem 3rem;\n  }\n\n  .title {\n    color: $background-color;\n  }\n\n  .column figure.image img {\n    max-width: 400px;\n  }\n\n  .instance-description {\n    margin-bottom: 1rem;\n  }\n}\n\n#recent_events {\n  padding: 0;\n  min-height: 20vh;\n  z-index: 10;\n\n  .title {\n    margin: 20px auto 0;\n  }\n\n  .columns {\n    margin: 0 auto;\n  }\n}\n\n#picture {\n  .picture-container {\n    position: relative;\n    &::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 1;\n    }\n\n    & > img {\n      object-fit: cover;\n      max-height: 80vh;\n      display: block;\n      margin: auto;\n      width: 100%;\n    }\n  }\n\n  .container.section {\n    background: $white;\n\n    @include tablet {\n      margin-top: -4rem;\n    }\n    z-index: 10;\n\n    .title {\n      margin: 0 0 10px;\n      font-size: 30px;\n    }\n\n    .buttons {\n      justify-content: center;\n      margin-top: 2rem;\n    }\n  }\n}\n\n#homepage {\n  background: $white;\n}\n\n.home-separator {\n  background-color: $orange-2;\n}\n\n.clickable {\n  cursor: pointer;\n}\n\n.title {\n  font-size: 27px;\n  &:not(:last-child) {\n    margin-bottom: 0.5rem;\n  }\n}\n</style>\n"
      },
      {
        "file": "js/src/views/Home.vue",
        "description": "## `get` functions in view templates\n\nMost of the `get` prefixed function are referred in the `<template></template>` section so most of the computation is done in the `<script></script>` part of the file. \n\nIn the `<template></template` part only view rendering computations are done (conditional rendering, collection pagination, internationalization...).",
        "line": 483,
        "contents": "<template>\n  <div id=\"homepage\">\n    <section\n      class=\"hero\"\n      :class=\"{ webp: supportsWebPFormat }\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <div class=\"hero-body\">\n        <div class=\"container\">\n          <h1 class=\"title\">\n            {{ config.slogan || $t(\"Gather ⋅ Organize ⋅ Mobilize\") }}\n          </h1>\n          <p\n            v-html=\"\n              $t('Join <b>{instance}</b>, a Mobilizon instance', {\n                instance: config.name,\n              })\n            \"\n          />\n          <p class=\"instance-description\">{{ config.description }}</p>\n          <!-- We don't invite to find other instances yet -->\n          <!-- <p v-if=\"!config.registrationsOpen\">\n              {{ $t(\"This instance isn't opened to registrations, but you can register on other instances.\") }}\n          </p>-->\n          <b-message type=\"is-danger\" v-if=\"!config.registrationsOpen\">{{\n            $t(\"Unfortunately, this instance isn't opened to registrations\")\n          }}</b-message>\n          <div class=\"buttons\">\n            <b-button\n              type=\"is-primary\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.REGISTER }\"\n              v-if=\"config.registrationsOpen\"\n              >{{ $t(\"Create an account\") }}</b-button\n            >\n            <!-- We don't invite to find other instances yet -->\n            <!-- <b-button v-else type=\"is-link\" tag=\"a\" href=\"https://joinmastodon.org\">{{ $t('Find an instance') }}</b-button> -->\n            <b-button\n              type=\"is-text\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.ABOUT }\"\n            >\n              {{ $t(\"Learn more about {instance}\", { instance: config.name }) }}\n            </b-button>\n          </div>\n        </div>\n      </div>\n    </section>\n    <div\n      id=\"recent_events\"\n      class=\"container section\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <EventCard :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\">{{\n          $t(\"No events found\")\n        }}</b-message>\n      </section>\n    </div>\n    <div id=\"picture\" v-if=\"config && (!currentUser.id || !currentActor.id)\">\n      <div class=\"picture-container\">\n        <picture>\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <img\n            src=\"/img/pics/homepage-1024w.jpg\"\n            width=\"3840\"\n            height=\"2719\"\n            alt=\"\"\n            loading=\"lazy\"\n          />\n        </picture>\n      </div>\n      <div class=\"container section\">\n        <div class=\"columns\">\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A practical tool\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is a tool that helps you <b>find, create and organise events</b>.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"An ethical alternative\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Ethical alternative to Facebook events, groups and pages, Mobilizon is a <b>tool designed to serve you</b>. Period.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A federated software\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is not a giant platform, but a <b>multitude of interconnected Mobilizon websites</b>.'\n                )\n              \"\n            />\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <a\n            class=\"button is-primary is-large\"\n            href=\"https://joinmobilizon.org\"\n            >{{ $t(\"Learn more about Mobilizon\") }}</a\n          >\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"container section\"\n      v-if=\"config && loggedUser && loggedUser.settings\"\n    >\n      <section v-if=\"currentActor.id && (welcomeBack || newRegisteredUser)\">\n        <b-message type=\"is-info\" v-if=\"welcomeBack\">{{\n          $t(\"Welcome back {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n        <b-message type=\"is-info\" v-if=\"newRegisteredUser\">{{\n          $t(\"Welcome to Mobilizon, {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n      </section>\n      <!-- Your upcoming events -->\n      <section v-if=\"canShowMyUpcomingEvents\">\n        <h2 class=\"title\">{{ $t(\"Your upcoming events\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-for=\"row of goingToEvents\" class=\"upcoming-events\" :key=\"row[0]\">\n          <p\n            class=\"date-component-container\"\n            v-if=\"isInLessThanSevenDays(row[0])\"\n          >\n            <span v-if=\"isToday(row[0])\">{{\n              $tc(\"You have one event today.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isTomorrow(row[0])\">{{\n              $tc(\"You have one event tomorrow.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isInLessThanSevenDays(row[0])\">\n              {{\n                $tc(\"You have one event in {days} days.\", row[1].length, {\n                  count: row[1].length,\n                  days: calculateDiffDays(row[0]),\n                })\n              }}\n            </span>\n          </p>\n          <div>\n            <EventListCard\n              v-for=\"participation in thisWeek(row)\"\n              @event-deleted=\"eventDeleted\"\n              :key=\"participation[1].id\"\n              :participation=\"participation[1]\"\n            />\n          </div>\n        </div>\n        <span class=\"view-all\">\n          <router-link :to=\"{ name: RouteName.MY_EVENTS }\"\n            >{{ $t(\"View everything\") }} >></router-link\n          >\n        </span>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowMyUpcomingEvents && canShowLastWeekEvents\"\n      />\n      <!-- Last week events -->\n      <section v-if=\"canShowLastWeekEvents\">\n        <h2 class=\"title\">{{ $t(\"Last week\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div>\n          <EventListCard\n            v-for=\"participation in lastWeekEvents\"\n            :key=\"participation.id\"\n            :participation=\"participation\"\n            @event-deleted=\"eventDeleted\"\n            :options=\"{ hideDate: false }\"\n          />\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowLastWeekEvents && canShowCloseEvents\"\n      />\n      <!-- Events close to you -->\n      <section class=\"events-close\" v-if=\"canShowCloseEvents\">\n        <h2 class=\"title\">\n          {{ $t(\"Events nearby\") }}\n        </h2>\n        <p>\n          {{\n            $tc(\n              \"Within {number} kilometers of {place}\",\n              loggedUser.settings.location.range,\n              {\n                number: loggedUser.settings.location.range,\n                place: loggedUser.settings.location.name,\n              }\n            )\n          }}\n          <router-link\n            :to=\"{ name: RouteName.PREFERENCES }\"\n            :title=\"$t('Change')\"\n          >\n            <b-icon class=\"clickable\" icon=\"pencil\" size=\"is-small\" />\n          </router-link>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <div class=\"columns is-multiline\">\n          <div\n            class=\"column is-one-third-desktop\"\n            v-for=\"event in closeEvents.elements.slice(0, 3)\"\n            :key=\"event.uuid\"\n          >\n            <event-card :event=\"event\" />\n          </div>\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"\n          canShowMyUpcomingEvents || canShowLastWeekEvents || canShowCloseEvents\n        \"\n      />\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <recent-event-card-wrapper :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\"\n          >{{ $t(\"No events found\") }}<br />\n          <div v-if=\"goingToEvents.size > 0 || lastWeekEvents.length > 0\">\n            <b-icon size=\"is-small\" icon=\"information-outline\" />\n            <small>{{\n              $t(\"The events you created are not shown here.\")\n            }}</small>\n          </div>\n        </b-message>\n      </section>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\nimport { EventSortField, ParticipantRole, SortDirection } from \"@/types/enums\";\nimport { Paginate } from \"@/types/paginate\";\nimport { supportsWebPFormat } from \"@/utils/support\";\nimport { IParticipant, Participant } from \"../types/participant.model\";\nimport { CLOSE_EVENTS, FETCH_EVENTS } from \"../graphql/event\";\nimport EventListCard from \"../components/Event/EventListCard.vue\";\nimport EventCard from \"../components/Event/EventCard.vue\";\nimport RecentEventCardWrapper from \"../components/Event/RecentEventCardWrapper.vue\";\nimport {\n  CURRENT_ACTOR_CLIENT,\n  LOGGED_USER_PARTICIPATIONS,\n} from \"../graphql/actor\";\nimport { IPerson, Person } from \"../types/actor\";\nimport { ICurrentUser, IUser } from \"../types/current-user.model\";\nimport { CURRENT_USER_CLIENT, USER_SETTINGS } from \"../graphql/user\";\nimport RouteName from \"../router/name\";\nimport { IEvent } from \"../types/event.model\";\nimport DateComponent from \"../components/Event/DateCalendarIcon.vue\";\nimport { CONFIG } from \"../graphql/config\";\nimport { IConfig } from \"../types/config.model\";\nimport Subtitle from \"../components/Utils/Subtitle.vue\";\n\n@Component({\n  apollo: {\n    events: {\n      query: FETCH_EVENTS,\n      fetchPolicy: \"no-cache\", // Debug me: https://github.com/apollographql/apollo-client/issues/3030\n      variables: {\n        orderBy: EventSortField.INSERTED_AT,\n        direction: SortDirection.DESC,\n      },\n    },\n    currentActor: {\n      query: CURRENT_ACTOR_CLIENT,\n      update: (data) => new Person(data.currentActor),\n    },\n    currentUser: CURRENT_USER_CLIENT,\n    loggedUser: {\n      query: USER_SETTINGS,\n      fetchPolicy: \"network-only\",\n      skip() {\n        return !this.currentUser || this.currentUser.isLoggedIn === false;\n      },\n      error() {\n        return null;\n      },\n    },\n    config: CONFIG,\n    currentUserParticipations: {\n      query: LOGGED_USER_PARTICIPATIONS,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        const lastWeek = new Date();\n        lastWeek.setDate(new Date().getDate() - 7);\n        return {\n          afterDateTime: lastWeek.toISOString(),\n        };\n      },\n      update: (data) =>\n        data.loggedUser.participations.elements.map(\n          (participation: IParticipant) => new Participant(participation)\n        ),\n      skip() {\n        return this.currentUser?.isLoggedIn === false;\n      },\n    },\n    closeEvents: {\n      query: CLOSE_EVENTS,\n      variables() {\n        return {\n          location: this.loggedUser?.settings?.location?.geohash,\n          radius: this.loggedUser?.settings?.location?.range,\n        };\n      },\n      update: (data) => data.searchEvents,\n      skip() {\n        return (\n          !this.currentUser?.isLoggedIn ||\n          !this.loggedUser?.settings?.location?.geohash ||\n          !this.loggedUser?.settings?.location?.range\n        );\n      },\n    },\n  },\n  components: {\n    Subtitle,\n    DateComponent,\n    EventListCard,\n    EventCard,\n    RecentEventCardWrapper,\n    \"settings-onboard\": () => import(\"./User/SettingsOnboard.vue\"),\n  },\n  metaInfo() {\n    return {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      title: this.instanceName,\n      titleTemplate: \"%s | Mobilizon\",\n    };\n  },\n})\nexport default class Home extends Vue {\n  events: Paginate<IEvent> = {\n    elements: [],\n    total: 0,\n  };\n\n  locations = [];\n\n  city = { name: null };\n\n  country = { name: null };\n\n  currentUser!: IUser;\n\n  loggedUser!: ICurrentUser;\n\n  currentActor!: IPerson;\n\n  config!: IConfig;\n\n  RouteName = RouteName;\n\n  currentUserParticipations: IParticipant[] = [];\n\n  supportsWebPFormat = supportsWebPFormat;\n\n  closeEvents: Paginate<IEvent> = { elements: [], total: 0 };\n\n  // get displayed_name() {\n  //   return this.loggedPerson && this.loggedPerson.name === null\n  //     ? this.loggedPerson.preferredUsername\n  //     : this.loggedPerson.name;\n  // }\n\n  get instanceName(): string | undefined {\n    if (!this.config) return undefined;\n    return this.config.name;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get welcomeBack(): boolean {\n    return window.localStorage.getItem(\"welcome-back\") === \"yes\";\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get newRegisteredUser(): boolean {\n    return window.localStorage.getItem(\"new-registered-user\") === \"yes\";\n  }\n\n  thisWeek(\n    row: [string, Map<string, IParticipant>]\n  ): Map<string, IParticipant> {\n    if (this.isInLessThanSevenDays(row[0])) {\n      return row[1];\n    }\n    return new Map();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  mounted(): void {\n    if (window.localStorage.getItem(\"welcome-back\")) {\n      window.localStorage.removeItem(\"welcome-back\");\n    }\n    if (window.localStorage.getItem(\"new-registered-user\")) {\n      window.localStorage.removeItem(\"new-registered-user\");\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isToday(date: Date): boolean {\n    return new Date(date).toDateString() === new Date().toDateString();\n  }\n\n  isTomorrow(date: string): boolean {\n    return this.isInDays(date, 1);\n  }\n\n  isInDays(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) === nbDays;\n  }\n\n  isBefore(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) < nbDays;\n  }\n\n  isAfter(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) >= nbDays;\n  }\n\n  isInLessThanSevenDays(date: string): boolean {\n    return this.isBefore(date, 7);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  calculateDiffDays(date: string): number {\n    return Math.ceil(\n      (new Date(date).getTime() - new Date().getTime()) / 1000 / 60 / 60 / 24\n    );\n  }\n\n  get thisWeekGoingToEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isAfter(event.beginsOn.toDateString(), 0) &&\n        this.isBefore(event.beginsOn.toDateString(), 7) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  get goingToEvents(): Map<string, Map<string, IParticipant>> {\n    return this.thisWeekGoingToEvents.reduce(\n      (\n        acc: Map<string, Map<string, IParticipant>>,\n        participation: IParticipant\n      ) => {\n        const day = new Date(participation.event.beginsOn).toDateString();\n        const participations: Map<string, IParticipant> =\n          acc.get(day) || new Map();\n        participations.set(\n          `${participation.event.uuid}${participation.actor.id}`,\n          participation\n        );\n        acc.set(day, participations);\n        return acc;\n      },\n      new Map()\n    );\n  }\n\n  get lastWeekEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isBefore(event.beginsOn.toDateString(), 0) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  eventDeleted(eventid: string): void {\n    this.currentUserParticipations = this.currentUserParticipations.filter(\n      (participation) => participation.event.id !== eventid\n    );\n  }\n\n  viewEvent(event: IEvent): void {\n    this.$router.push({ name: RouteName.EVENT, params: { uuid: event.uuid } });\n  }\n\n  @Watch(\"loggedUser\")\n  detectEmptyUserSettings(loggedUser: IUser): void {\n    if (loggedUser && loggedUser.id && loggedUser.settings === null) {\n      this.$router.push({\n        name: RouteName.WELCOME_SCREEN,\n        params: { step: \"1\" },\n      });\n    }\n  }\n\n  get canShowMyUpcomingEvents(): boolean {\n    return this.currentActor.id != undefined && this.goingToEvents.size > 0;\n  }\n\n  get canShowLastWeekEvents(): boolean {\n    return this.currentActor && this.lastWeekEvents.length > 0;\n  }\n\n  get canShowCloseEvents(): boolean {\n    return this.closeEvents.total > 0;\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"~bulma/sass/utilities/mixins.sass\";\n\nmain > div > .container {\n  background: $white;\n  padding: 1rem 0.5rem 3rem;\n}\n\n.search-autocomplete {\n  border: 1px solid #dbdbdb;\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.events-recent {\n  & > h3 {\n    padding-left: 0.75rem;\n  }\n\n  .columns {\n    margin: 1rem auto 0;\n  }\n}\n\n.date-component-container {\n  display: flex;\n  align-items: center;\n  margin: 0.5rem auto 1rem;\n\n  h3.subtitle {\n    margin-left: 7px;\n  }\n}\n\nspan.view-all {\n  display: block;\n  margin-top: 1rem;\n  text-align: right;\n\n  a {\n    text-decoration: underline;\n  }\n}\n\nsection.hero {\n  position: relative;\n  z-index: 1;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.3;\n    z-index: -1;\n    background: url(\"../../public/img/pics/homepage_background-1024w.png\");\n    background-size: cover;\n  }\n  &.webp::before {\n    background-image: url(\"../../public/img/pics/homepage_background-1024w.webp\");\n  }\n\n  & > .hero-body {\n    padding: 1rem 1.5rem 3rem;\n  }\n\n  .title {\n    color: $background-color;\n  }\n\n  .column figure.image img {\n    max-width: 400px;\n  }\n\n  .instance-description {\n    margin-bottom: 1rem;\n  }\n}\n\n#recent_events {\n  padding: 0;\n  min-height: 20vh;\n  z-index: 10;\n\n  .title {\n    margin: 20px auto 0;\n  }\n\n  .columns {\n    margin: 0 auto;\n  }\n}\n\n#picture {\n  .picture-container {\n    position: relative;\n    &::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 1;\n    }\n\n    & > img {\n      object-fit: cover;\n      max-height: 80vh;\n      display: block;\n      margin: auto;\n      width: 100%;\n    }\n  }\n\n  .container.section {\n    background: $white;\n\n    @include tablet {\n      margin-top: -4rem;\n    }\n    z-index: 10;\n\n    .title {\n      margin: 0 0 10px;\n      font-size: 30px;\n    }\n\n    .buttons {\n      justify-content: center;\n      margin-top: 2rem;\n    }\n  }\n}\n\n#homepage {\n  background: $white;\n}\n\n.home-separator {\n  background-color: $orange-2;\n}\n\n.clickable {\n  cursor: pointer;\n}\n\n.title {\n  font-size: 27px;\n  &:not(:last-child) {\n    margin-bottom: 0.5rem;\n  }\n}\n</style>\n"
      },
      {
        "file": "js/src/views/Home.vue",
        "description": "## I18n internationalized string 1/2\n\nDepending on the current language, `\"Last published events\"` will be replaced with another text.\n\nEx. If language is french, the string will be looked up in the [`i18n/fr_FR.json`](./js/src/i18n/fr_FR.json) file.\n\n```js\n   {{ $t(\"Last published events\") }}\n```\n\nAbstract of `fr_FR.json`.\n\n```json\n{\n\n   \"Last published events\": \"Derniers événements publiés\",\n\n}\n```\n\nIn this case the french translation will be : \"Derniers événements publiés\".\n",
        "line": 315,
        "selection": {
          "start": {
            "line": 307,
            "character": 18
          },
          "end": {
            "line": 307,
            "character": 39
          }
        },
        "contents": "<template>\n  <div id=\"homepage\">\n    <section\n      class=\"hero\"\n      :class=\"{ webp: supportsWebPFormat }\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <div class=\"hero-body\">\n        <div class=\"container\">\n          <h1 class=\"title\">\n            {{ config.slogan || $t(\"Gather ⋅ Organize ⋅ Mobilize\") }}\n          </h1>\n          <p\n            v-html=\"\n              $t('Join <b>{instance}</b>, a Mobilizon instance', {\n                instance: config.name,\n              })\n            \"\n          />\n          <p class=\"instance-description\">{{ config.description }}</p>\n          <!-- We don't invite to find other instances yet -->\n          <!-- <p v-if=\"!config.registrationsOpen\">\n              {{ $t(\"This instance isn't opened to registrations, but you can register on other instances.\") }}\n          </p>-->\n          <b-message type=\"is-danger\" v-if=\"!config.registrationsOpen\">{{\n            $t(\"Unfortunately, this instance isn't opened to registrations\")\n          }}</b-message>\n          <div class=\"buttons\">\n            <b-button\n              type=\"is-primary\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.REGISTER }\"\n              v-if=\"config.registrationsOpen\"\n              >{{ $t(\"Create an account\") }}</b-button\n            >\n            <!-- We don't invite to find other instances yet -->\n            <!-- <b-button v-else type=\"is-link\" tag=\"a\" href=\"https://joinmastodon.org\">{{ $t('Find an instance') }}</b-button> -->\n            <b-button\n              type=\"is-text\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.ABOUT }\"\n            >\n              {{ $t(\"Learn more about {instance}\", { instance: config.name }) }}\n            </b-button>\n          </div>\n        </div>\n      </div>\n    </section>\n    <div\n      id=\"recent_events\"\n      class=\"container section\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <EventCard :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\">{{\n          $t(\"No events found\")\n        }}</b-message>\n      </section>\n    </div>\n    <div id=\"picture\" v-if=\"config && (!currentUser.id || !currentActor.id)\">\n      <div class=\"picture-container\">\n        <picture>\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <img\n            src=\"/img/pics/homepage-1024w.jpg\"\n            width=\"3840\"\n            height=\"2719\"\n            alt=\"\"\n            loading=\"lazy\"\n          />\n        </picture>\n      </div>\n      <div class=\"container section\">\n        <div class=\"columns\">\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A practical tool\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is a tool that helps you <b>find, create and organise events</b>.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"An ethical alternative\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Ethical alternative to Facebook events, groups and pages, Mobilizon is a <b>tool designed to serve you</b>. Period.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A federated software\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is not a giant platform, but a <b>multitude of interconnected Mobilizon websites</b>.'\n                )\n              \"\n            />\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <a\n            class=\"button is-primary is-large\"\n            href=\"https://joinmobilizon.org\"\n            >{{ $t(\"Learn more about Mobilizon\") }}</a\n          >\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"container section\"\n      v-if=\"config && loggedUser && loggedUser.settings\"\n    >\n      <section v-if=\"currentActor.id && (welcomeBack || newRegisteredUser)\">\n        <b-message type=\"is-info\" v-if=\"welcomeBack\">{{\n          $t(\"Welcome back {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n        <b-message type=\"is-info\" v-if=\"newRegisteredUser\">{{\n          $t(\"Welcome to Mobilizon, {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n      </section>\n      <!-- Your upcoming events -->\n      <section v-if=\"canShowMyUpcomingEvents\">\n        <h2 class=\"title\">{{ $t(\"Your upcoming events\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-for=\"row of goingToEvents\" class=\"upcoming-events\" :key=\"row[0]\">\n          <p\n            class=\"date-component-container\"\n            v-if=\"isInLessThanSevenDays(row[0])\"\n          >\n            <span v-if=\"isToday(row[0])\">{{\n              $tc(\"You have one event today.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isTomorrow(row[0])\">{{\n              $tc(\"You have one event tomorrow.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isInLessThanSevenDays(row[0])\">\n              {{\n                $tc(\"You have one event in {days} days.\", row[1].length, {\n                  count: row[1].length,\n                  days: calculateDiffDays(row[0]),\n                })\n              }}\n            </span>\n          </p>\n          <div>\n            <EventListCard\n              v-for=\"participation in thisWeek(row)\"\n              @event-deleted=\"eventDeleted\"\n              :key=\"participation[1].id\"\n              :participation=\"participation[1]\"\n            />\n          </div>\n        </div>\n        <span class=\"view-all\">\n          <router-link :to=\"{ name: RouteName.MY_EVENTS }\"\n            >{{ $t(\"View everything\") }} >></router-link\n          >\n        </span>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowMyUpcomingEvents && canShowLastWeekEvents\"\n      />\n      <!-- Last week events -->\n      <section v-if=\"canShowLastWeekEvents\">\n        <h2 class=\"title\">{{ $t(\"Last week\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div>\n          <EventListCard\n            v-for=\"participation in lastWeekEvents\"\n            :key=\"participation.id\"\n            :participation=\"participation\"\n            @event-deleted=\"eventDeleted\"\n            :options=\"{ hideDate: false }\"\n          />\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowLastWeekEvents && canShowCloseEvents\"\n      />\n      <!-- Events close to you -->\n      <section class=\"events-close\" v-if=\"canShowCloseEvents\">\n        <h2 class=\"title\">\n          {{ $t(\"Events nearby\") }}\n        </h2>\n        <p>\n          {{\n            $tc(\n              \"Within {number} kilometers of {place}\",\n              loggedUser.settings.location.range,\n              {\n                number: loggedUser.settings.location.range,\n                place: loggedUser.settings.location.name,\n              }\n            )\n          }}\n          <router-link\n            :to=\"{ name: RouteName.PREFERENCES }\"\n            :title=\"$t('Change')\"\n          >\n            <b-icon class=\"clickable\" icon=\"pencil\" size=\"is-small\" />\n          </router-link>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <div class=\"columns is-multiline\">\n          <div\n            class=\"column is-one-third-desktop\"\n            v-for=\"event in closeEvents.elements.slice(0, 3)\"\n            :key=\"event.uuid\"\n          >\n            <event-card :event=\"event\" />\n          </div>\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"\n          canShowMyUpcomingEvents || canShowLastWeekEvents || canShowCloseEvents\n        \"\n      />\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <recent-event-card-wrapper :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\"\n          >{{ $t(\"No events found\") }}<br />\n          <div v-if=\"goingToEvents.size > 0 || lastWeekEvents.length > 0\">\n            <b-icon size=\"is-small\" icon=\"information-outline\" />\n            <small>{{\n              $t(\"The events you created are not shown here.\")\n            }}</small>\n          </div>\n        </b-message>\n      </section>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\nimport { EventSortField, ParticipantRole, SortDirection } from \"@/types/enums\";\nimport { Paginate } from \"@/types/paginate\";\nimport { supportsWebPFormat } from \"@/utils/support\";\nimport { IParticipant, Participant } from \"../types/participant.model\";\nimport { CLOSE_EVENTS, FETCH_EVENTS } from \"../graphql/event\";\nimport EventListCard from \"../components/Event/EventListCard.vue\";\nimport EventCard from \"../components/Event/EventCard.vue\";\nimport RecentEventCardWrapper from \"../components/Event/RecentEventCardWrapper.vue\";\nimport {\n  CURRENT_ACTOR_CLIENT,\n  LOGGED_USER_PARTICIPATIONS,\n} from \"../graphql/actor\";\nimport { IPerson, Person } from \"../types/actor\";\nimport { ICurrentUser, IUser } from \"../types/current-user.model\";\nimport { CURRENT_USER_CLIENT, USER_SETTINGS } from \"../graphql/user\";\nimport RouteName from \"../router/name\";\nimport { IEvent } from \"../types/event.model\";\nimport DateComponent from \"../components/Event/DateCalendarIcon.vue\";\nimport { CONFIG } from \"../graphql/config\";\nimport { IConfig } from \"../types/config.model\";\nimport Subtitle from \"../components/Utils/Subtitle.vue\";\n\n@Component({\n  apollo: {\n    events: {\n      query: FETCH_EVENTS,\n      fetchPolicy: \"no-cache\", // Debug me: https://github.com/apollographql/apollo-client/issues/3030\n      variables: {\n        orderBy: EventSortField.INSERTED_AT,\n        direction: SortDirection.DESC,\n      },\n    },\n    currentActor: {\n      query: CURRENT_ACTOR_CLIENT,\n      update: (data) => new Person(data.currentActor),\n    },\n    currentUser: CURRENT_USER_CLIENT,\n    loggedUser: {\n      query: USER_SETTINGS,\n      fetchPolicy: \"network-only\",\n      skip() {\n        return !this.currentUser || this.currentUser.isLoggedIn === false;\n      },\n      error() {\n        return null;\n      },\n    },\n    config: CONFIG,\n    currentUserParticipations: {\n      query: LOGGED_USER_PARTICIPATIONS,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        const lastWeek = new Date();\n        lastWeek.setDate(new Date().getDate() - 7);\n        return {\n          afterDateTime: lastWeek.toISOString(),\n        };\n      },\n      update: (data) =>\n        data.loggedUser.participations.elements.map(\n          (participation: IParticipant) => new Participant(participation)\n        ),\n      skip() {\n        return this.currentUser?.isLoggedIn === false;\n      },\n    },\n    closeEvents: {\n      query: CLOSE_EVENTS,\n      variables() {\n        return {\n          location: this.loggedUser?.settings?.location?.geohash,\n          radius: this.loggedUser?.settings?.location?.range,\n        };\n      },\n      update: (data) => data.searchEvents,\n      skip() {\n        return (\n          !this.currentUser?.isLoggedIn ||\n          !this.loggedUser?.settings?.location?.geohash ||\n          !this.loggedUser?.settings?.location?.range\n        );\n      },\n    },\n  },\n  components: {\n    Subtitle,\n    DateComponent,\n    EventListCard,\n    EventCard,\n    RecentEventCardWrapper,\n    \"settings-onboard\": () => import(\"./User/SettingsOnboard.vue\"),\n  },\n  metaInfo() {\n    return {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      title: this.instanceName,\n      titleTemplate: \"%s | Mobilizon\",\n    };\n  },\n})\nexport default class Home extends Vue {\n  events: Paginate<IEvent> = {\n    elements: [],\n    total: 0,\n  };\n\n  locations = [];\n\n  city = { name: null };\n\n  country = { name: null };\n\n  currentUser!: IUser;\n\n  loggedUser!: ICurrentUser;\n\n  currentActor!: IPerson;\n\n  config!: IConfig;\n\n  RouteName = RouteName;\n\n  currentUserParticipations: IParticipant[] = [];\n\n  supportsWebPFormat = supportsWebPFormat;\n\n  closeEvents: Paginate<IEvent> = { elements: [], total: 0 };\n\n  // get displayed_name() {\n  //   return this.loggedPerson && this.loggedPerson.name === null\n  //     ? this.loggedPerson.preferredUsername\n  //     : this.loggedPerson.name;\n  // }\n\n  get instanceName(): string | undefined {\n    if (!this.config) return undefined;\n    return this.config.name;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get welcomeBack(): boolean {\n    return window.localStorage.getItem(\"welcome-back\") === \"yes\";\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get newRegisteredUser(): boolean {\n    return window.localStorage.getItem(\"new-registered-user\") === \"yes\";\n  }\n\n  thisWeek(\n    row: [string, Map<string, IParticipant>]\n  ): Map<string, IParticipant> {\n    if (this.isInLessThanSevenDays(row[0])) {\n      return row[1];\n    }\n    return new Map();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  mounted(): void {\n    if (window.localStorage.getItem(\"welcome-back\")) {\n      window.localStorage.removeItem(\"welcome-back\");\n    }\n    if (window.localStorage.getItem(\"new-registered-user\")) {\n      window.localStorage.removeItem(\"new-registered-user\");\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isToday(date: Date): boolean {\n    return new Date(date).toDateString() === new Date().toDateString();\n  }\n\n  isTomorrow(date: string): boolean {\n    return this.isInDays(date, 1);\n  }\n\n  isInDays(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) === nbDays;\n  }\n\n  isBefore(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) < nbDays;\n  }\n\n  isAfter(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) >= nbDays;\n  }\n\n  isInLessThanSevenDays(date: string): boolean {\n    return this.isBefore(date, 7);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  calculateDiffDays(date: string): number {\n    return Math.ceil(\n      (new Date(date).getTime() - new Date().getTime()) / 1000 / 60 / 60 / 24\n    );\n  }\n\n  get thisWeekGoingToEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isAfter(event.beginsOn.toDateString(), 0) &&\n        this.isBefore(event.beginsOn.toDateString(), 7) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  get goingToEvents(): Map<string, Map<string, IParticipant>> {\n    return this.thisWeekGoingToEvents.reduce(\n      (\n        acc: Map<string, Map<string, IParticipant>>,\n        participation: IParticipant\n      ) => {\n        const day = new Date(participation.event.beginsOn).toDateString();\n        const participations: Map<string, IParticipant> =\n          acc.get(day) || new Map();\n        participations.set(\n          `${participation.event.uuid}${participation.actor.id}`,\n          participation\n        );\n        acc.set(day, participations);\n        return acc;\n      },\n      new Map()\n    );\n  }\n\n  get lastWeekEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isBefore(event.beginsOn.toDateString(), 0) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  eventDeleted(eventid: string): void {\n    this.currentUserParticipations = this.currentUserParticipations.filter(\n      (participation) => participation.event.id !== eventid\n    );\n  }\n\n  viewEvent(event: IEvent): void {\n    this.$router.push({ name: RouteName.EVENT, params: { uuid: event.uuid } });\n  }\n\n  @Watch(\"loggedUser\")\n  detectEmptyUserSettings(loggedUser: IUser): void {\n    if (loggedUser && loggedUser.id && loggedUser.settings === null) {\n      this.$router.push({\n        name: RouteName.WELCOME_SCREEN,\n        params: { step: \"1\" },\n      });\n    }\n  }\n\n  get canShowMyUpcomingEvents(): boolean {\n    return this.currentActor.id != undefined && this.goingToEvents.size > 0;\n  }\n\n  get canShowLastWeekEvents(): boolean {\n    return this.currentActor && this.lastWeekEvents.length > 0;\n  }\n\n  get canShowCloseEvents(): boolean {\n    return this.closeEvents.total > 0;\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"~bulma/sass/utilities/mixins.sass\";\n\nmain > div > .container {\n  background: $white;\n  padding: 1rem 0.5rem 3rem;\n}\n\n.search-autocomplete {\n  border: 1px solid #dbdbdb;\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.events-recent {\n  & > h3 {\n    padding-left: 0.75rem;\n  }\n\n  .columns {\n    margin: 1rem auto 0;\n  }\n}\n\n.date-component-container {\n  display: flex;\n  align-items: center;\n  margin: 0.5rem auto 1rem;\n\n  h3.subtitle {\n    margin-left: 7px;\n  }\n}\n\nspan.view-all {\n  display: block;\n  margin-top: 1rem;\n  text-align: right;\n\n  a {\n    text-decoration: underline;\n  }\n}\n\nsection.hero {\n  position: relative;\n  z-index: 1;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.3;\n    z-index: -1;\n    background: url(\"../../public/img/pics/homepage_background-1024w.png\");\n    background-size: cover;\n  }\n  &.webp::before {\n    background-image: url(\"../../public/img/pics/homepage_background-1024w.webp\");\n  }\n\n  & > .hero-body {\n    padding: 1rem 1.5rem 3rem;\n  }\n\n  .title {\n    color: $background-color;\n  }\n\n  .column figure.image img {\n    max-width: 400px;\n  }\n\n  .instance-description {\n    margin-bottom: 1rem;\n  }\n}\n\n#recent_events {\n  padding: 0;\n  min-height: 20vh;\n  z-index: 10;\n\n  .title {\n    margin: 20px auto 0;\n  }\n\n  .columns {\n    margin: 0 auto;\n  }\n}\n\n#picture {\n  .picture-container {\n    position: relative;\n    &::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 1;\n    }\n\n    & > img {\n      object-fit: cover;\n      max-height: 80vh;\n      display: block;\n      margin: auto;\n      width: 100%;\n    }\n  }\n\n  .container.section {\n    background: $white;\n\n    @include tablet {\n      margin-top: -4rem;\n    }\n    z-index: 10;\n\n    .title {\n      margin: 0 0 10px;\n      font-size: 30px;\n    }\n\n    .buttons {\n      justify-content: center;\n      margin-top: 2rem;\n    }\n  }\n}\n\n#homepage {\n  background: $white;\n}\n\n.home-separator {\n  background-color: $orange-2;\n}\n\n.clickable {\n  cursor: pointer;\n}\n\n.title {\n  font-size: 27px;\n  &:not(:last-child) {\n    margin-bottom: 0.5rem;\n  }\n}\n</style>\n"
      },
      {
        "file": "js/src/views/Home.vue",
        "description": "## I18n internationalized string 2/2\n\nAnother way to translate text is by using `<i18n></i18n>` element. I allows more complex text substitutions like parametrized text.",
        "line": 310,
        "contents": "<template>\n  <div id=\"homepage\">\n    <section\n      class=\"hero\"\n      :class=\"{ webp: supportsWebPFormat }\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <div class=\"hero-body\">\n        <div class=\"container\">\n          <h1 class=\"title\">\n            {{ config.slogan || $t(\"Gather ⋅ Organize ⋅ Mobilize\") }}\n          </h1>\n          <p\n            v-html=\"\n              $t('Join <b>{instance}</b>, a Mobilizon instance', {\n                instance: config.name,\n              })\n            \"\n          />\n          <p class=\"instance-description\">{{ config.description }}</p>\n          <!-- We don't invite to find other instances yet -->\n          <!-- <p v-if=\"!config.registrationsOpen\">\n              {{ $t(\"This instance isn't opened to registrations, but you can register on other instances.\") }}\n          </p>-->\n          <b-message type=\"is-danger\" v-if=\"!config.registrationsOpen\">{{\n            $t(\"Unfortunately, this instance isn't opened to registrations\")\n          }}</b-message>\n          <div class=\"buttons\">\n            <b-button\n              type=\"is-primary\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.REGISTER }\"\n              v-if=\"config.registrationsOpen\"\n              >{{ $t(\"Create an account\") }}</b-button\n            >\n            <!-- We don't invite to find other instances yet -->\n            <!-- <b-button v-else type=\"is-link\" tag=\"a\" href=\"https://joinmastodon.org\">{{ $t('Find an instance') }}</b-button> -->\n            <b-button\n              type=\"is-text\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.ABOUT }\"\n            >\n              {{ $t(\"Learn more about {instance}\", { instance: config.name }) }}\n            </b-button>\n          </div>\n        </div>\n      </div>\n    </section>\n    <div\n      id=\"recent_events\"\n      class=\"container section\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <EventCard :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\">{{\n          $t(\"No events found\")\n        }}</b-message>\n      </section>\n    </div>\n    <div id=\"picture\" v-if=\"config && (!currentUser.id || !currentActor.id)\">\n      <div class=\"picture-container\">\n        <picture>\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <img\n            src=\"/img/pics/homepage-1024w.jpg\"\n            width=\"3840\"\n            height=\"2719\"\n            alt=\"\"\n            loading=\"lazy\"\n          />\n        </picture>\n      </div>\n      <div class=\"container section\">\n        <div class=\"columns\">\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A practical tool\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is a tool that helps you <b>find, create and organise events</b>.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"An ethical alternative\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Ethical alternative to Facebook events, groups and pages, Mobilizon is a <b>tool designed to serve you</b>. Period.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A federated software\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is not a giant platform, but a <b>multitude of interconnected Mobilizon websites</b>.'\n                )\n              \"\n            />\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <a\n            class=\"button is-primary is-large\"\n            href=\"https://joinmobilizon.org\"\n            >{{ $t(\"Learn more about Mobilizon\") }}</a\n          >\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"container section\"\n      v-if=\"config && loggedUser && loggedUser.settings\"\n    >\n      <section v-if=\"currentActor.id && (welcomeBack || newRegisteredUser)\">\n        <b-message type=\"is-info\" v-if=\"welcomeBack\">{{\n          $t(\"Welcome back {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n        <b-message type=\"is-info\" v-if=\"newRegisteredUser\">{{\n          $t(\"Welcome to Mobilizon, {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n      </section>\n      <!-- Your upcoming events -->\n      <section v-if=\"canShowMyUpcomingEvents\">\n        <h2 class=\"title\">{{ $t(\"Your upcoming events\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-for=\"row of goingToEvents\" class=\"upcoming-events\" :key=\"row[0]\">\n          <p\n            class=\"date-component-container\"\n            v-if=\"isInLessThanSevenDays(row[0])\"\n          >\n            <span v-if=\"isToday(row[0])\">{{\n              $tc(\"You have one event today.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isTomorrow(row[0])\">{{\n              $tc(\"You have one event tomorrow.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isInLessThanSevenDays(row[0])\">\n              {{\n                $tc(\"You have one event in {days} days.\", row[1].length, {\n                  count: row[1].length,\n                  days: calculateDiffDays(row[0]),\n                })\n              }}\n            </span>\n          </p>\n          <div>\n            <EventListCard\n              v-for=\"participation in thisWeek(row)\"\n              @event-deleted=\"eventDeleted\"\n              :key=\"participation[1].id\"\n              :participation=\"participation[1]\"\n            />\n          </div>\n        </div>\n        <span class=\"view-all\">\n          <router-link :to=\"{ name: RouteName.MY_EVENTS }\"\n            >{{ $t(\"View everything\") }} >></router-link\n          >\n        </span>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowMyUpcomingEvents && canShowLastWeekEvents\"\n      />\n      <!-- Last week events -->\n      <section v-if=\"canShowLastWeekEvents\">\n        <h2 class=\"title\">{{ $t(\"Last week\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div>\n          <EventListCard\n            v-for=\"participation in lastWeekEvents\"\n            :key=\"participation.id\"\n            :participation=\"participation\"\n            @event-deleted=\"eventDeleted\"\n            :options=\"{ hideDate: false }\"\n          />\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowLastWeekEvents && canShowCloseEvents\"\n      />\n      <!-- Events close to you -->\n      <section class=\"events-close\" v-if=\"canShowCloseEvents\">\n        <h2 class=\"title\">\n          {{ $t(\"Events nearby\") }}\n        </h2>\n        <p>\n          {{\n            $tc(\n              \"Within {number} kilometers of {place}\",\n              loggedUser.settings.location.range,\n              {\n                number: loggedUser.settings.location.range,\n                place: loggedUser.settings.location.name,\n              }\n            )\n          }}\n          <router-link\n            :to=\"{ name: RouteName.PREFERENCES }\"\n            :title=\"$t('Change')\"\n          >\n            <b-icon class=\"clickable\" icon=\"pencil\" size=\"is-small\" />\n          </router-link>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <div class=\"columns is-multiline\">\n          <div\n            class=\"column is-one-third-desktop\"\n            v-for=\"event in closeEvents.elements.slice(0, 3)\"\n            :key=\"event.uuid\"\n          >\n            <event-card :event=\"event\" />\n          </div>\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"\n          canShowMyUpcomingEvents || canShowLastWeekEvents || canShowCloseEvents\n        \"\n      />\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <recent-event-card-wrapper :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\"\n          >{{ $t(\"No events found\") }}<br />\n          <div v-if=\"goingToEvents.size > 0 || lastWeekEvents.length > 0\">\n            <b-icon size=\"is-small\" icon=\"information-outline\" />\n            <small>{{\n              $t(\"The events you created are not shown here.\")\n            }}</small>\n          </div>\n        </b-message>\n      </section>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\nimport { EventSortField, ParticipantRole, SortDirection } from \"@/types/enums\";\nimport { Paginate } from \"@/types/paginate\";\nimport { supportsWebPFormat } from \"@/utils/support\";\nimport { IParticipant, Participant } from \"../types/participant.model\";\nimport { CLOSE_EVENTS, FETCH_EVENTS } from \"../graphql/event\";\nimport EventListCard from \"../components/Event/EventListCard.vue\";\nimport EventCard from \"../components/Event/EventCard.vue\";\nimport RecentEventCardWrapper from \"../components/Event/RecentEventCardWrapper.vue\";\nimport {\n  CURRENT_ACTOR_CLIENT,\n  LOGGED_USER_PARTICIPATIONS,\n} from \"../graphql/actor\";\nimport { IPerson, Person } from \"../types/actor\";\nimport { ICurrentUser, IUser } from \"../types/current-user.model\";\nimport { CURRENT_USER_CLIENT, USER_SETTINGS } from \"../graphql/user\";\nimport RouteName from \"../router/name\";\nimport { IEvent } from \"../types/event.model\";\nimport DateComponent from \"../components/Event/DateCalendarIcon.vue\";\nimport { CONFIG } from \"../graphql/config\";\nimport { IConfig } from \"../types/config.model\";\nimport Subtitle from \"../components/Utils/Subtitle.vue\";\n\n@Component({\n  apollo: {\n    events: {\n      query: FETCH_EVENTS,\n      fetchPolicy: \"no-cache\", // Debug me: https://github.com/apollographql/apollo-client/issues/3030\n      variables: {\n        orderBy: EventSortField.INSERTED_AT,\n        direction: SortDirection.DESC,\n      },\n    },\n    currentActor: {\n      query: CURRENT_ACTOR_CLIENT,\n      update: (data) => new Person(data.currentActor),\n    },\n    currentUser: CURRENT_USER_CLIENT,\n    loggedUser: {\n      query: USER_SETTINGS,\n      fetchPolicy: \"network-only\",\n      skip() {\n        return !this.currentUser || this.currentUser.isLoggedIn === false;\n      },\n      error() {\n        return null;\n      },\n    },\n    config: CONFIG,\n    currentUserParticipations: {\n      query: LOGGED_USER_PARTICIPATIONS,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        const lastWeek = new Date();\n        lastWeek.setDate(new Date().getDate() - 7);\n        return {\n          afterDateTime: lastWeek.toISOString(),\n        };\n      },\n      update: (data) =>\n        data.loggedUser.participations.elements.map(\n          (participation: IParticipant) => new Participant(participation)\n        ),\n      skip() {\n        return this.currentUser?.isLoggedIn === false;\n      },\n    },\n    closeEvents: {\n      query: CLOSE_EVENTS,\n      variables() {\n        return {\n          location: this.loggedUser?.settings?.location?.geohash,\n          radius: this.loggedUser?.settings?.location?.range,\n        };\n      },\n      update: (data) => data.searchEvents,\n      skip() {\n        return (\n          !this.currentUser?.isLoggedIn ||\n          !this.loggedUser?.settings?.location?.geohash ||\n          !this.loggedUser?.settings?.location?.range\n        );\n      },\n    },\n  },\n  components: {\n    Subtitle,\n    DateComponent,\n    EventListCard,\n    EventCard,\n    RecentEventCardWrapper,\n    \"settings-onboard\": () => import(\"./User/SettingsOnboard.vue\"),\n  },\n  metaInfo() {\n    return {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      title: this.instanceName,\n      titleTemplate: \"%s | Mobilizon\",\n    };\n  },\n})\nexport default class Home extends Vue {\n  events: Paginate<IEvent> = {\n    elements: [],\n    total: 0,\n  };\n\n  locations = [];\n\n  city = { name: null };\n\n  country = { name: null };\n\n  currentUser!: IUser;\n\n  loggedUser!: ICurrentUser;\n\n  currentActor!: IPerson;\n\n  config!: IConfig;\n\n  RouteName = RouteName;\n\n  currentUserParticipations: IParticipant[] = [];\n\n  supportsWebPFormat = supportsWebPFormat;\n\n  closeEvents: Paginate<IEvent> = { elements: [], total: 0 };\n\n  // get displayed_name() {\n  //   return this.loggedPerson && this.loggedPerson.name === null\n  //     ? this.loggedPerson.preferredUsername\n  //     : this.loggedPerson.name;\n  // }\n\n  get instanceName(): string | undefined {\n    if (!this.config) return undefined;\n    return this.config.name;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get welcomeBack(): boolean {\n    return window.localStorage.getItem(\"welcome-back\") === \"yes\";\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get newRegisteredUser(): boolean {\n    return window.localStorage.getItem(\"new-registered-user\") === \"yes\";\n  }\n\n  thisWeek(\n    row: [string, Map<string, IParticipant>]\n  ): Map<string, IParticipant> {\n    if (this.isInLessThanSevenDays(row[0])) {\n      return row[1];\n    }\n    return new Map();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  mounted(): void {\n    if (window.localStorage.getItem(\"welcome-back\")) {\n      window.localStorage.removeItem(\"welcome-back\");\n    }\n    if (window.localStorage.getItem(\"new-registered-user\")) {\n      window.localStorage.removeItem(\"new-registered-user\");\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isToday(date: Date): boolean {\n    return new Date(date).toDateString() === new Date().toDateString();\n  }\n\n  isTomorrow(date: string): boolean {\n    return this.isInDays(date, 1);\n  }\n\n  isInDays(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) === nbDays;\n  }\n\n  isBefore(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) < nbDays;\n  }\n\n  isAfter(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) >= nbDays;\n  }\n\n  isInLessThanSevenDays(date: string): boolean {\n    return this.isBefore(date, 7);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  calculateDiffDays(date: string): number {\n    return Math.ceil(\n      (new Date(date).getTime() - new Date().getTime()) / 1000 / 60 / 60 / 24\n    );\n  }\n\n  get thisWeekGoingToEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isAfter(event.beginsOn.toDateString(), 0) &&\n        this.isBefore(event.beginsOn.toDateString(), 7) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  get goingToEvents(): Map<string, Map<string, IParticipant>> {\n    return this.thisWeekGoingToEvents.reduce(\n      (\n        acc: Map<string, Map<string, IParticipant>>,\n        participation: IParticipant\n      ) => {\n        const day = new Date(participation.event.beginsOn).toDateString();\n        const participations: Map<string, IParticipant> =\n          acc.get(day) || new Map();\n        participations.set(\n          `${participation.event.uuid}${participation.actor.id}`,\n          participation\n        );\n        acc.set(day, participations);\n        return acc;\n      },\n      new Map()\n    );\n  }\n\n  get lastWeekEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isBefore(event.beginsOn.toDateString(), 0) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  eventDeleted(eventid: string): void {\n    this.currentUserParticipations = this.currentUserParticipations.filter(\n      (participation) => participation.event.id !== eventid\n    );\n  }\n\n  viewEvent(event: IEvent): void {\n    this.$router.push({ name: RouteName.EVENT, params: { uuid: event.uuid } });\n  }\n\n  @Watch(\"loggedUser\")\n  detectEmptyUserSettings(loggedUser: IUser): void {\n    if (loggedUser && loggedUser.id && loggedUser.settings === null) {\n      this.$router.push({\n        name: RouteName.WELCOME_SCREEN,\n        params: { step: \"1\" },\n      });\n    }\n  }\n\n  get canShowMyUpcomingEvents(): boolean {\n    return this.currentActor.id != undefined && this.goingToEvents.size > 0;\n  }\n\n  get canShowLastWeekEvents(): boolean {\n    return this.currentActor && this.lastWeekEvents.length > 0;\n  }\n\n  get canShowCloseEvents(): boolean {\n    return this.closeEvents.total > 0;\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"~bulma/sass/utilities/mixins.sass\";\n\nmain > div > .container {\n  background: $white;\n  padding: 1rem 0.5rem 3rem;\n}\n\n.search-autocomplete {\n  border: 1px solid #dbdbdb;\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.events-recent {\n  & > h3 {\n    padding-left: 0.75rem;\n  }\n\n  .columns {\n    margin: 1rem auto 0;\n  }\n}\n\n.date-component-container {\n  display: flex;\n  align-items: center;\n  margin: 0.5rem auto 1rem;\n\n  h3.subtitle {\n    margin-left: 7px;\n  }\n}\n\nspan.view-all {\n  display: block;\n  margin-top: 1rem;\n  text-align: right;\n\n  a {\n    text-decoration: underline;\n  }\n}\n\nsection.hero {\n  position: relative;\n  z-index: 1;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.3;\n    z-index: -1;\n    background: url(\"../../public/img/pics/homepage_background-1024w.png\");\n    background-size: cover;\n  }\n  &.webp::before {\n    background-image: url(\"../../public/img/pics/homepage_background-1024w.webp\");\n  }\n\n  & > .hero-body {\n    padding: 1rem 1.5rem 3rem;\n  }\n\n  .title {\n    color: $background-color;\n  }\n\n  .column figure.image img {\n    max-width: 400px;\n  }\n\n  .instance-description {\n    margin-bottom: 1rem;\n  }\n}\n\n#recent_events {\n  padding: 0;\n  min-height: 20vh;\n  z-index: 10;\n\n  .title {\n    margin: 20px auto 0;\n  }\n\n  .columns {\n    margin: 0 auto;\n  }\n}\n\n#picture {\n  .picture-container {\n    position: relative;\n    &::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 1;\n    }\n\n    & > img {\n      object-fit: cover;\n      max-height: 80vh;\n      display: block;\n      margin: auto;\n      width: 100%;\n    }\n  }\n\n  .container.section {\n    background: $white;\n\n    @include tablet {\n      margin-top: -4rem;\n    }\n    z-index: 10;\n\n    .title {\n      margin: 0 0 10px;\n      font-size: 30px;\n    }\n\n    .buttons {\n      justify-content: center;\n      margin-top: 2rem;\n    }\n  }\n}\n\n#homepage {\n  background: $white;\n}\n\n.home-separator {\n  background-color: $orange-2;\n}\n\n.clickable {\n  cursor: pointer;\n}\n\n.title {\n  font-size: 27px;\n  &:not(:last-child) {\n    margin-bottom: 0.5rem;\n  }\n}\n</style>\n"
      },
      {
        "file": "js/src/views/Home.vue",
        "description": "## Hyperlink with router 1/5 - `$router.push`\n\nAn hyperlink can be translated as a change of route with the router.\n\n```js\n  viewEvent(event: IEvent): void {\n    this.$router.push({ name: RouteName.EVENT, params: { uuid: event.uuid } });\n  }\n```\n\nIn this case, the uuid of the clicked Mobilizon Event is passed to the router to resolve the `EVENT` route which is the Event's detail page.",
        "line": 604,
        "selection": {
          "start": {
            "line": 604,
            "character": 1
          },
          "end": {
            "line": 606,
            "character": 4
          }
        },
        "contents": "<template>\n  <div id=\"homepage\">\n    <section\n      class=\"hero\"\n      :class=\"{ webp: supportsWebPFormat }\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <div class=\"hero-body\">\n        <div class=\"container\">\n          <h1 class=\"title\">\n            {{ config.slogan || $t(\"Gather ⋅ Organize ⋅ Mobilize\") }}\n          </h1>\n          <p\n            v-html=\"\n              $t('Join <b>{instance}</b>, a Mobilizon instance', {\n                instance: config.name,\n              })\n            \"\n          />\n          <p class=\"instance-description\">{{ config.description }}</p>\n          <!-- We don't invite to find other instances yet -->\n          <!-- <p v-if=\"!config.registrationsOpen\">\n              {{ $t(\"This instance isn't opened to registrations, but you can register on other instances.\") }}\n          </p>-->\n          <b-message type=\"is-danger\" v-if=\"!config.registrationsOpen\">{{\n            $t(\"Unfortunately, this instance isn't opened to registrations\")\n          }}</b-message>\n          <div class=\"buttons\">\n            <b-button\n              type=\"is-primary\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.REGISTER }\"\n              v-if=\"config.registrationsOpen\"\n              >{{ $t(\"Create an account\") }}</b-button\n            >\n            <!-- We don't invite to find other instances yet -->\n            <!-- <b-button v-else type=\"is-link\" tag=\"a\" href=\"https://joinmastodon.org\">{{ $t('Find an instance') }}</b-button> -->\n            <b-button\n              type=\"is-text\"\n              tag=\"router-link\"\n              :to=\"{ name: RouteName.ABOUT }\"\n            >\n              {{ $t(\"Learn more about {instance}\", { instance: config.name }) }}\n            </b-button>\n          </div>\n        </div>\n      </div>\n    </section>\n    <div\n      id=\"recent_events\"\n      class=\"container section\"\n      v-if=\"config && (!currentUser.id || !currentActor.id)\"\n    >\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <EventCard :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\">{{\n          $t(\"No events found\")\n        }}</b-message>\n      </section>\n    </div>\n    <div id=\"picture\" v-if=\"config && (!currentUser.id || !currentActor.id)\">\n      <div class=\"picture-container\">\n        <picture>\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 799px)\"\n            srcset=\"/img/pics/homepage-480w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1024px)\"\n            srcset=\"/img/pics/homepage-1024w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(max-width: 1920px)\"\n            srcset=\"/img/pics/homepage-1920w.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.webp\"\n            type=\"image/webp\"\n          />\n          <source\n            media=\"(min-width: 1921px)\"\n            srcset=\"/img/pics/homepage.jpg\"\n            type=\"image/jpeg\"\n          />\n\n          <img\n            src=\"/img/pics/homepage-1024w.jpg\"\n            width=\"3840\"\n            height=\"2719\"\n            alt=\"\"\n            loading=\"lazy\"\n          />\n        </picture>\n      </div>\n      <div class=\"container section\">\n        <div class=\"columns\">\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A practical tool\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is a tool that helps you <b>find, create and organise events</b>.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"An ethical alternative\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Ethical alternative to Facebook events, groups and pages, Mobilizon is a <b>tool designed to serve you</b>. Period.'\n                )\n              \"\n            />\n          </div>\n          <div class=\"column\">\n            <h3 class=\"title\">{{ $t(\"A federated software\") }}</h3>\n            <p\n              v-html=\"\n                $t(\n                  'Mobilizon is not a giant platform, but a <b>multitude of interconnected Mobilizon websites</b>.'\n                )\n              \"\n            />\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <a\n            class=\"button is-primary is-large\"\n            href=\"https://joinmobilizon.org\"\n            >{{ $t(\"Learn more about Mobilizon\") }}</a\n          >\n        </div>\n      </div>\n    </div>\n    <div\n      class=\"container section\"\n      v-if=\"config && loggedUser && loggedUser.settings\"\n    >\n      <section v-if=\"currentActor.id && (welcomeBack || newRegisteredUser)\">\n        <b-message type=\"is-info\" v-if=\"welcomeBack\">{{\n          $t(\"Welcome back {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n        <b-message type=\"is-info\" v-if=\"newRegisteredUser\">{{\n          $t(\"Welcome to Mobilizon, {username}!\", {\n            username: currentActor.displayName(),\n          })\n        }}</b-message>\n      </section>\n      <!-- Your upcoming events -->\n      <section v-if=\"canShowMyUpcomingEvents\">\n        <h2 class=\"title\">{{ $t(\"Your upcoming events\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div v-for=\"row of goingToEvents\" class=\"upcoming-events\" :key=\"row[0]\">\n          <p\n            class=\"date-component-container\"\n            v-if=\"isInLessThanSevenDays(row[0])\"\n          >\n            <span v-if=\"isToday(row[0])\">{{\n              $tc(\"You have one event today.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isTomorrow(row[0])\">{{\n              $tc(\"You have one event tomorrow.\", row[1].length, {\n                count: row[1].length,\n              })\n            }}</span>\n            <span v-else-if=\"isInLessThanSevenDays(row[0])\">\n              {{\n                $tc(\"You have one event in {days} days.\", row[1].length, {\n                  count: row[1].length,\n                  days: calculateDiffDays(row[0]),\n                })\n              }}\n            </span>\n          </p>\n          <div>\n            <EventListCard\n              v-for=\"participation in thisWeek(row)\"\n              @event-deleted=\"eventDeleted\"\n              :key=\"participation[1].id\"\n              :participation=\"participation[1]\"\n            />\n          </div>\n        </div>\n        <span class=\"view-all\">\n          <router-link :to=\"{ name: RouteName.MY_EVENTS }\"\n            >{{ $t(\"View everything\") }} >></router-link\n          >\n        </span>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowMyUpcomingEvents && canShowLastWeekEvents\"\n      />\n      <!-- Last week events -->\n      <section v-if=\"canShowLastWeekEvents\">\n        <h2 class=\"title\">{{ $t(\"Last week\") }}</h2>\n        <b-loading :active.sync=\"$apollo.loading\" />\n        <div>\n          <EventListCard\n            v-for=\"participation in lastWeekEvents\"\n            :key=\"participation.id\"\n            :participation=\"participation\"\n            @event-deleted=\"eventDeleted\"\n            :options=\"{ hideDate: false }\"\n          />\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"canShowLastWeekEvents && canShowCloseEvents\"\n      />\n      <!-- Events close to you -->\n      <section class=\"events-close\" v-if=\"canShowCloseEvents\">\n        <h2 class=\"title\">\n          {{ $t(\"Events nearby\") }}\n        </h2>\n        <p>\n          {{\n            $tc(\n              \"Within {number} kilometers of {place}\",\n              loggedUser.settings.location.range,\n              {\n                number: loggedUser.settings.location.range,\n                place: loggedUser.settings.location.name,\n              }\n            )\n          }}\n          <router-link\n            :to=\"{ name: RouteName.PREFERENCES }\"\n            :title=\"$t('Change')\"\n          >\n            <b-icon class=\"clickable\" icon=\"pencil\" size=\"is-small\" />\n          </router-link>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n        <div class=\"columns is-multiline\">\n          <div\n            class=\"column is-one-third-desktop\"\n            v-for=\"event in closeEvents.elements.slice(0, 3)\"\n            :key=\"event.uuid\"\n          >\n            <event-card :event=\"event\" />\n          </div>\n        </div>\n      </section>\n      <hr\n        class=\"home-separator\"\n        v-if=\"\n          canShowMyUpcomingEvents || canShowLastWeekEvents || canShowCloseEvents\n        \"\n      />\n      <section class=\"events-recent\">\n        <h2 class=\"title\">\n          {{ $t(\"Last published events\") }}\n        </h2>\n        <p>\n          <i18n tag=\"span\" path=\"On {instance} and other federated instances\">\n            <b slot=\"instance\">{{ config.name }}</b>\n          </i18n>\n          <b-loading :active.sync=\"$apollo.loading\" />\n        </p>\n\n        <div v-if=\"this.events.total > 0\">\n          <div class=\"columns is-multiline\">\n            <div\n              class=\"column is-one-third-desktop\"\n              v-for=\"event in this.events.elements.slice(0, 6)\"\n              :key=\"event.uuid\"\n            >\n              <recent-event-card-wrapper :event=\"event\" />\n            </div>\n          </div>\n          <span class=\"view-all\">\n            <router-link :to=\"{ name: RouteName.SEARCH }\"\n              >{{ $t(\"View everything\") }} >></router-link\n            >\n          </span>\n        </div>\n        <b-message v-else type=\"is-danger\"\n          >{{ $t(\"No events found\") }}<br />\n          <div v-if=\"goingToEvents.size > 0 || lastWeekEvents.length > 0\">\n            <b-icon size=\"is-small\" icon=\"information-outline\" />\n            <small>{{\n              $t(\"The events you created are not shown here.\")\n            }}</small>\n          </div>\n        </b-message>\n      </section>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Watch } from \"vue-property-decorator\";\nimport { EventSortField, ParticipantRole, SortDirection } from \"@/types/enums\";\nimport { Paginate } from \"@/types/paginate\";\nimport { supportsWebPFormat } from \"@/utils/support\";\nimport { IParticipant, Participant } from \"../types/participant.model\";\nimport { CLOSE_EVENTS, FETCH_EVENTS } from \"../graphql/event\";\nimport EventListCard from \"../components/Event/EventListCard.vue\";\nimport EventCard from \"../components/Event/EventCard.vue\";\nimport RecentEventCardWrapper from \"../components/Event/RecentEventCardWrapper.vue\";\nimport {\n  CURRENT_ACTOR_CLIENT,\n  LOGGED_USER_PARTICIPATIONS,\n} from \"../graphql/actor\";\nimport { IPerson, Person } from \"../types/actor\";\nimport { ICurrentUser, IUser } from \"../types/current-user.model\";\nimport { CURRENT_USER_CLIENT, USER_SETTINGS } from \"../graphql/user\";\nimport RouteName from \"../router/name\";\nimport { IEvent } from \"../types/event.model\";\nimport DateComponent from \"../components/Event/DateCalendarIcon.vue\";\nimport { CONFIG } from \"../graphql/config\";\nimport { IConfig } from \"../types/config.model\";\nimport Subtitle from \"../components/Utils/Subtitle.vue\";\n\n@Component({\n  apollo: {\n    events: {\n      query: FETCH_EVENTS,\n      fetchPolicy: \"no-cache\", // Debug me: https://github.com/apollographql/apollo-client/issues/3030\n      variables: {\n        orderBy: EventSortField.INSERTED_AT,\n        direction: SortDirection.DESC,\n      },\n    },\n    currentActor: {\n      query: CURRENT_ACTOR_CLIENT,\n      update: (data) => new Person(data.currentActor),\n    },\n    currentUser: CURRENT_USER_CLIENT,\n    loggedUser: {\n      query: USER_SETTINGS,\n      fetchPolicy: \"network-only\",\n      skip() {\n        return !this.currentUser || this.currentUser.isLoggedIn === false;\n      },\n      error() {\n        return null;\n      },\n    },\n    config: CONFIG,\n    currentUserParticipations: {\n      query: LOGGED_USER_PARTICIPATIONS,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        const lastWeek = new Date();\n        lastWeek.setDate(new Date().getDate() - 7);\n        return {\n          afterDateTime: lastWeek.toISOString(),\n        };\n      },\n      update: (data) =>\n        data.loggedUser.participations.elements.map(\n          (participation: IParticipant) => new Participant(participation)\n        ),\n      skip() {\n        return this.currentUser?.isLoggedIn === false;\n      },\n    },\n    closeEvents: {\n      query: CLOSE_EVENTS,\n      variables() {\n        return {\n          location: this.loggedUser?.settings?.location?.geohash,\n          radius: this.loggedUser?.settings?.location?.range,\n        };\n      },\n      update: (data) => data.searchEvents,\n      skip() {\n        return (\n          !this.currentUser?.isLoggedIn ||\n          !this.loggedUser?.settings?.location?.geohash ||\n          !this.loggedUser?.settings?.location?.range\n        );\n      },\n    },\n  },\n  components: {\n    Subtitle,\n    DateComponent,\n    EventListCard,\n    EventCard,\n    RecentEventCardWrapper,\n    \"settings-onboard\": () => import(\"./User/SettingsOnboard.vue\"),\n  },\n  metaInfo() {\n    return {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      title: this.instanceName,\n      titleTemplate: \"%s | Mobilizon\",\n    };\n  },\n})\nexport default class Home extends Vue {\n  events: Paginate<IEvent> = {\n    elements: [],\n    total: 0,\n  };\n\n  locations = [];\n\n  city = { name: null };\n\n  country = { name: null };\n\n  currentUser!: IUser;\n\n  loggedUser!: ICurrentUser;\n\n  currentActor!: IPerson;\n\n  config!: IConfig;\n\n  RouteName = RouteName;\n\n  currentUserParticipations: IParticipant[] = [];\n\n  supportsWebPFormat = supportsWebPFormat;\n\n  closeEvents: Paginate<IEvent> = { elements: [], total: 0 };\n\n  // get displayed_name() {\n  //   return this.loggedPerson && this.loggedPerson.name === null\n  //     ? this.loggedPerson.preferredUsername\n  //     : this.loggedPerson.name;\n  // }\n\n  get instanceName(): string | undefined {\n    if (!this.config) return undefined;\n    return this.config.name;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get welcomeBack(): boolean {\n    return window.localStorage.getItem(\"welcome-back\") === \"yes\";\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  get newRegisteredUser(): boolean {\n    return window.localStorage.getItem(\"new-registered-user\") === \"yes\";\n  }\n\n  thisWeek(\n    row: [string, Map<string, IParticipant>]\n  ): Map<string, IParticipant> {\n    if (this.isInLessThanSevenDays(row[0])) {\n      return row[1];\n    }\n    return new Map();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  mounted(): void {\n    if (window.localStorage.getItem(\"welcome-back\")) {\n      window.localStorage.removeItem(\"welcome-back\");\n    }\n    if (window.localStorage.getItem(\"new-registered-user\")) {\n      window.localStorage.removeItem(\"new-registered-user\");\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  isToday(date: Date): boolean {\n    return new Date(date).toDateString() === new Date().toDateString();\n  }\n\n  isTomorrow(date: string): boolean {\n    return this.isInDays(date, 1);\n  }\n\n  isInDays(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) === nbDays;\n  }\n\n  isBefore(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) < nbDays;\n  }\n\n  isAfter(date: string, nbDays: number): boolean {\n    return this.calculateDiffDays(date) >= nbDays;\n  }\n\n  isInLessThanSevenDays(date: string): boolean {\n    return this.isBefore(date, 7);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  calculateDiffDays(date: string): number {\n    return Math.ceil(\n      (new Date(date).getTime() - new Date().getTime()) / 1000 / 60 / 60 / 24\n    );\n  }\n\n  get thisWeekGoingToEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isAfter(event.beginsOn.toDateString(), 0) &&\n        this.isBefore(event.beginsOn.toDateString(), 7) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  get goingToEvents(): Map<string, Map<string, IParticipant>> {\n    return this.thisWeekGoingToEvents.reduce(\n      (\n        acc: Map<string, Map<string, IParticipant>>,\n        participation: IParticipant\n      ) => {\n        const day = new Date(participation.event.beginsOn).toDateString();\n        const participations: Map<string, IParticipant> =\n          acc.get(day) || new Map();\n        participations.set(\n          `${participation.event.uuid}${participation.actor.id}`,\n          participation\n        );\n        acc.set(day, participations);\n        return acc;\n      },\n      new Map()\n    );\n  }\n\n  get lastWeekEvents(): IParticipant[] {\n    const res = this.currentUserParticipations.filter(\n      ({ event, role }) =>\n        event.beginsOn != null &&\n        this.isBefore(event.beginsOn.toDateString(), 0) &&\n        role !== ParticipantRole.REJECTED\n    );\n    res.sort(\n      (a: IParticipant, b: IParticipant) =>\n        a.event.beginsOn.getTime() - b.event.beginsOn.getTime()\n    );\n    return res;\n  }\n\n  eventDeleted(eventid: string): void {\n    this.currentUserParticipations = this.currentUserParticipations.filter(\n      (participation) => participation.event.id !== eventid\n    );\n  }\n\n  viewEvent(event: IEvent): void {\n    this.$router.push({ name: RouteName.EVENT, params: { uuid: event.uuid } });\n  }\n\n  @Watch(\"loggedUser\")\n  detectEmptyUserSettings(loggedUser: IUser): void {\n    if (loggedUser && loggedUser.id && loggedUser.settings === null) {\n      this.$router.push({\n        name: RouteName.WELCOME_SCREEN,\n        params: { step: \"1\" },\n      });\n    }\n  }\n\n  get canShowMyUpcomingEvents(): boolean {\n    return this.currentActor.id != undefined && this.goingToEvents.size > 0;\n  }\n\n  get canShowLastWeekEvents(): boolean {\n    return this.currentActor && this.lastWeekEvents.length > 0;\n  }\n\n  get canShowCloseEvents(): boolean {\n    return this.closeEvents.total > 0;\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"~bulma/sass/utilities/mixins.sass\";\n\nmain > div > .container {\n  background: $white;\n  padding: 1rem 0.5rem 3rem;\n}\n\n.search-autocomplete {\n  border: 1px solid #dbdbdb;\n  color: rgba(0, 0, 0, 0.87);\n}\n\n.events-recent {\n  & > h3 {\n    padding-left: 0.75rem;\n  }\n\n  .columns {\n    margin: 1rem auto 0;\n  }\n}\n\n.date-component-container {\n  display: flex;\n  align-items: center;\n  margin: 0.5rem auto 1rem;\n\n  h3.subtitle {\n    margin-left: 7px;\n  }\n}\n\nspan.view-all {\n  display: block;\n  margin-top: 1rem;\n  text-align: right;\n\n  a {\n    text-decoration: underline;\n  }\n}\n\nsection.hero {\n  position: relative;\n  z-index: 1;\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 0.3;\n    z-index: -1;\n    background: url(\"../../public/img/pics/homepage_background-1024w.png\");\n    background-size: cover;\n  }\n  &.webp::before {\n    background-image: url(\"../../public/img/pics/homepage_background-1024w.webp\");\n  }\n\n  & > .hero-body {\n    padding: 1rem 1.5rem 3rem;\n  }\n\n  .title {\n    color: $background-color;\n  }\n\n  .column figure.image img {\n    max-width: 400px;\n  }\n\n  .instance-description {\n    margin-bottom: 1rem;\n  }\n}\n\n#recent_events {\n  padding: 0;\n  min-height: 20vh;\n  z-index: 10;\n\n  .title {\n    margin: 20px auto 0;\n  }\n\n  .columns {\n    margin: 0 auto;\n  }\n}\n\n#picture {\n  .picture-container {\n    position: relative;\n    &::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 1;\n    }\n\n    & > img {\n      object-fit: cover;\n      max-height: 80vh;\n      display: block;\n      margin: auto;\n      width: 100%;\n    }\n  }\n\n  .container.section {\n    background: $white;\n\n    @include tablet {\n      margin-top: -4rem;\n    }\n    z-index: 10;\n\n    .title {\n      margin: 0 0 10px;\n      font-size: 30px;\n    }\n\n    .buttons {\n      justify-content: center;\n      margin-top: 2rem;\n    }\n  }\n}\n\n#homepage {\n  background: $white;\n}\n\n.home-separator {\n  background-color: $orange-2;\n}\n\n.clickable {\n  cursor: pointer;\n}\n\n.title {\n  font-size: 27px;\n  &:not(:last-child) {\n    margin-bottom: 0.5rem;\n  }\n}\n</style>\n"
      },
      {
        "file": "js/src/router/event.ts",
        "description": "## Hyperlink with router 2/5 - route definition\n\nThe uuid provided previously is passed to render the component [`views/Event/Event.vue`](./js/src/views/Event/Event.vue)",
        "line": 76,
        "selection": {
          "start": {
            "line": 11,
            "character": 42
          },
          "end": {
            "line": 11,
            "character": 67
          }
        },
        "contents": "import { RouteConfig, Route } from \"vue-router\";\nimport { ImportedComponent } from \"vue/types/options\";\n\nconst participations = (): Promise<ImportedComponent> =>\n  import(\n    /* webpackChunkName: \"participations\" */ \"@/views/Event/Participants.vue\"\n  );\nconst editEvent = (): Promise<ImportedComponent> =>\n  import(/* webpackChunkName: \"edit-event\" */ \"@/views/Event/Edit.vue\");\nconst event = (): Promise<ImportedComponent> =>\n  import(/* webpackChunkName: \"event\" */ \"@/views/Event/Event.vue\");\nconst myEvents = (): Promise<ImportedComponent> =>\n  import(/* webpackChunkName: \"my-events\" */ \"@/views/Event/MyEvents.vue\");\n\nexport enum EventRouteName {\n  EVENT_LIST = \"EventList\",\n  CREATE_EVENT = \"CreateEvent\",\n  MY_EVENTS = \"MyEvents\",\n  EDIT_EVENT = \"EditEvent\",\n  DUPLICATE_EVENT = \"DuplicateEvent\",\n  PARTICIPATIONS = \"Participations\",\n  EVENT = \"Event\",\n  EVENT_PARTICIPATE_WITH_ACCOUNT = \"EVENT_PARTICIPATE_WITH_ACCOUNT\",\n  EVENT_PARTICIPATE_WITHOUT_ACCOUNT = \"EVENT_PARTICIPATE_WITHOUT_ACCOUNT\",\n  EVENT_PARTICIPATE_LOGGED_OUT = \"EVENT_PARTICIPATE_LOGGED_OUT\",\n  EVENT_PARTICIPATE_CONFIRM = \"EVENT_PARTICIPATE_CONFIRM\",\n  TAG = \"Tag\",\n}\n\nexport const eventRoutes: RouteConfig[] = [\n  {\n    path: \"/events/list/:location?\",\n    name: EventRouteName.EVENT_LIST,\n    component: (): Promise<ImportedComponent> =>\n      import(/* webpackChunkName: \"EventList\" */ \"@/views/Event/EventList.vue\"),\n    meta: { requiredAuth: false },\n  },\n  {\n    path: \"/events/create\",\n    name: EventRouteName.CREATE_EVENT,\n    component: editEvent,\n    meta: { requiredAuth: true },\n  },\n  {\n    path: \"/events/me\",\n    name: EventRouteName.MY_EVENTS,\n    component: myEvents,\n    meta: { requiredAuth: true },\n  },\n  {\n    path: \"/events/edit/:eventId\",\n    name: EventRouteName.EDIT_EVENT,\n    component: editEvent,\n    meta: { requiredAuth: true },\n    props: (route: Route): Record<string, unknown> => {\n      return { ...route.params, ...{ isUpdate: true } };\n    },\n  },\n  {\n    path: \"/events/duplicate/:eventId\",\n    name: EventRouteName.DUPLICATE_EVENT,\n    component: editEvent,\n    meta: { requiredAuth: true },\n    props: (route: Route): Record<string, unknown> => ({\n      ...route.params,\n      ...{ isDuplicate: true },\n    }),\n  },\n  {\n    path: \"/events/:eventId/participations\",\n    name: EventRouteName.PARTICIPATIONS,\n    component: participations,\n    meta: { requiredAuth: true },\n    props: true,\n  },\n  {\n    path: \"/events/:uuid\",\n    name: EventRouteName.EVENT,\n    component: event,\n    props: true,\n    meta: { requiredAuth: false },\n  },\n  {\n    path: \"/events/:uuid/participate\",\n    name: EventRouteName.EVENT_PARTICIPATE_LOGGED_OUT,\n    component: (): Promise<ImportedComponent> =>\n      import(\"../components/Participation/UnloggedParticipation.vue\"),\n    props: true,\n  },\n  {\n    path: \"/events/:uuid/participate/with-account\",\n    name: EventRouteName.EVENT_PARTICIPATE_WITH_ACCOUNT,\n    component: (): Promise<ImportedComponent> =>\n      import(\"../components/Participation/ParticipationWithAccount.vue\"),\n    props: true,\n  },\n  {\n    path: \"/events/:uuid/participate/without-account\",\n    name: EventRouteName.EVENT_PARTICIPATE_WITHOUT_ACCOUNT,\n    component: (): Promise<ImportedComponent> =>\n      import(\"../components/Participation/ParticipationWithoutAccount.vue\"),\n    props: true,\n  },\n  {\n    path: \"/participation/email/confirm/:token\",\n    name: EventRouteName.EVENT_PARTICIPATE_CONFIRM,\n    component: (): Promise<ImportedComponent> =>\n      import(\"../components/Participation/ConfirmParticipation.vue\"),\n    props: true,\n  },\n  {\n    path: \"/tag/:tag\",\n    name: EventRouteName.TAG,\n    component: (): Promise<ImportedComponent> =>\n      import(/* webpackChunkName: \"Search\" */ \"@/views/Search.vue\"),\n    props: true,\n    meta: { requiredAuth: false },\n  },\n];\n"
      },
      {
        "file": "js/src/views/Event/Event.vue",
        "description": "## Hyperlink with router 3/5 - component prop from router\n\nHere, we can see that the event's uuid from the router is present as a `@Prop` for the component.",
        "line": 625,
        "contents": "<template>\n  <div class=\"container\">\n    <b-loading :active.sync=\"$apollo.queries.event.loading\" />\n    <div class=\"wrapper\">\n      <event-banner :picture=\"event.picture\" />\n      <div class=\"intro-wrapper\">\n        <div class=\"date-calendar-icon-wrapper\">\n          <date-calendar-icon :date=\"event.beginsOn\" />\n        </div>\n        <section class=\"intro\">\n          <div class=\"columns\">\n            <div class=\"column\">\n              <h1 class=\"title\" style=\"margin: 0\">{{ event.title }}</h1>\n              <div class=\"organizer\">\n                <span v-if=\"event.organizerActor && !event.attributedTo\">\n                  <popover-actor-card\n                    :actor=\"event.organizerActor\"\n                    :inline=\"true\"\n                  >\n                    <span>\n                      {{\n                        $t(\"By @{username}\", {\n                          username: usernameWithDomain(event.organizerActor),\n                        })\n                      }}\n                    </span>\n                  </popover-actor-card>\n                </span>\n                <span\n                  v-else-if=\"\n                    event.attributedTo &&\n                    event.options.hideOrganizerWhenGroupEvent\n                  \"\n                >\n                  <popover-actor-card\n                    :actor=\"event.attributedTo\"\n                    :inline=\"true\"\n                  >\n                    {{\n                      $t(\"By @{group}\", {\n                        group: usernameWithDomain(event.attributedTo),\n                      })\n                    }}\n                  </popover-actor-card>\n                </span>\n                <span v-else-if=\"event.organizerActor && event.attributedTo\">\n                  <i18n path=\"By {group}\">\n                    <popover-actor-card\n                      :actor=\"event.attributedTo\"\n                      slot=\"group\"\n                      :inline=\"true\"\n                    >\n                      <router-link\n                        :to=\"{\n                          name: RouteName.GROUP,\n                          params: {\n                            preferredUsername: usernameWithDomain(\n                              event.attributedTo\n                            ),\n                          },\n                        }\"\n                      >\n                        {{\n                          $t(\"@{group}\", {\n                            group: usernameWithDomain(event.attributedTo),\n                          })\n                        }}\n                      </router-link>\n                    </popover-actor-card>\n                  </i18n>\n                </span>\n              </div>\n              <p class=\"tags\" v-if=\"event.tags && event.tags.length > 0\">\n                <router-link\n                  v-for=\"tag in event.tags\"\n                  :key=\"tag.title\"\n                  :to=\"{ name: RouteName.TAG, params: { tag: tag.title } }\"\n                >\n                  <tag>{{ tag.title }}</tag>\n                </router-link>\n              </p>\n              <b-tag type=\"is-warning\" size=\"is-medium\" v-if=\"event.draft\"\n                >{{ $t(\"Draft\") }}\n              </b-tag>\n              <span\n                class=\"event-status\"\n                v-if=\"event.status !== EventStatus.CONFIRMED\"\n              >\n                <b-tag\n                  type=\"is-warning\"\n                  v-if=\"event.status === EventStatus.TENTATIVE\"\n                  >{{ $t(\"Event to be confirmed\") }}</b-tag\n                >\n                <b-tag\n                  type=\"is-danger\"\n                  v-if=\"event.status === EventStatus.CANCELLED\"\n                  >{{ $t(\"Event cancelled\") }}</b-tag\n                >\n              </span>\n            </div>\n            <div class=\"column is-3-tablet\">\n              <participation-section\n                :participation=\"participations[0]\"\n                :event=\"event\"\n                :anonymousParticipation=\"anonymousParticipation\"\n                @join-event=\"joinEvent\"\n                @join-modal=\"isJoinModalActive = true\"\n                @join-event-with-confirmation=\"joinEventWithConfirmation\"\n                @confirm-leave=\"confirmLeave\"\n                @cancel-anonymous-participation=\"cancelAnonymousParticipation\"\n              />\n              <div class=\"has-text-right\">\n                <template class=\"visibility\" v-if=\"!event.draft\">\n                  <p v-if=\"event.visibility === EventVisibility.PUBLIC\">\n                    {{ $t(\"Public event\") }}\n                    <b-icon icon=\"earth\" />\n                  </p>\n                  <p v-if=\"event.visibility === EventVisibility.UNLISTED\">\n                    {{ $t(\"Private event\") }}\n                    <b-icon icon=\"link\" />\n                  </p>\n                </template>\n                <template v-if=\"!event.local && organizer.domain\">\n                  <a :href=\"event.url\">\n                    <tag>{{ organizer.domain }}</tag>\n                  </a>\n                </template>\n                <p>\n                  <router-link\n                    class=\"participations-link\"\n                    v-if=\"canManageEvent && event.draft === false\"\n                    :to=\"{\n                      name: RouteName.PARTICIPATIONS,\n                      params: { eventId: event.uuid },\n                    }\"\n                  >\n                    <!-- We retire one because of the event creator who is a participant -->\n                    <span v-if=\"event.options.maximumAttendeeCapacity\">\n                      {{\n                        $tc(\n                          \"{available}/{capacity} available places\",\n                          event.options.maximumAttendeeCapacity -\n                            event.participantStats.participant,\n                          {\n                            available:\n                              event.options.maximumAttendeeCapacity -\n                              event.participantStats.participant,\n                            capacity: event.options.maximumAttendeeCapacity,\n                          }\n                        )\n                      }}\n                    </span>\n                    <span v-else>\n                      {{\n                        $tc(\n                          \"No one is participating|One person participating|{going} people participating\",\n                          event.participantStats.participant,\n                          {\n                            going: event.participantStats.participant,\n                          }\n                        )\n                      }}\n                    </span>\n                  </router-link>\n                  <span v-else>\n                    <span v-if=\"event.options.maximumAttendeeCapacity\">\n                      {{\n                        $tc(\n                          \"{available}/{capacity} available places\",\n                          event.options.maximumAttendeeCapacity -\n                            event.participantStats.participant,\n                          {\n                            available:\n                              event.options.maximumAttendeeCapacity -\n                              event.participantStats.participant,\n                            capacity: event.options.maximumAttendeeCapacity,\n                          }\n                        )\n                      }}\n                    </span>\n                    <span v-else>\n                      {{\n                        $tc(\n                          \"No one is participating|One person participating|{going} people participating\",\n                          event.participantStats.participant,\n                          {\n                            going: event.participantStats.participant,\n                          }\n                        )\n                      }}\n                    </span>\n                  </span>\n                  <b-tooltip\n                    type=\"is-dark\"\n                    v-if=\"!event.local\"\n                    :label=\"\n                      $t(\n                        'The actual number of participants may differ, as this event is hosted on another instance.'\n                      )\n                    \"\n                  >\n                    <b-icon size=\"is-small\" icon=\"help-circle-outline\" />\n                  </b-tooltip>\n                  <b-icon icon=\"ticket-confirmation-outline\" />\n                </p>\n                <b-dropdown position=\"is-bottom-left\" aria-role=\"list\">\n                  <b-button\n                    slot=\"trigger\"\n                    role=\"button\"\n                    icon-right=\"dots-horizontal\"\n                  >\n                    {{ $t(\"Actions\") }}\n                  </b-button>\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    has-link\n                    v-if=\"canManageEvent || event.draft\"\n                  >\n                    <router-link\n                      :to=\"{\n                        name: RouteName.EDIT_EVENT,\n                        params: { eventId: event.uuid },\n                      }\"\n                    >\n                      {{ $t(\"Edit\") }}\n                      <b-icon icon=\"pencil\" />\n                    </router-link>\n                  </b-dropdown-item>\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    has-link\n                    v-if=\"canManageEvent || event.draft\"\n                  >\n                    <router-link\n                      :to=\"{\n                        name: RouteName.DUPLICATE_EVENT,\n                        params: { eventId: event.uuid },\n                      }\"\n                    >\n                      {{ $t(\"Duplicate\") }}\n                      <b-icon icon=\"content-duplicate\" />\n                    </router-link>\n                  </b-dropdown-item>\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    v-if=\"canManageEvent || event.draft\"\n                    @click=\"openDeleteEventModalWrapper\"\n                  >\n                    {{ $t(\"Delete\") }}\n                    <b-icon icon=\"delete\" />\n                  </b-dropdown-item>\n\n                  <hr\n                    class=\"dropdown-divider\"\n                    aria-role=\"menuitem\"\n                    v-if=\"canManageEvent || event.draft\"\n                  />\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    v-if=\"!event.draft\"\n                    @click=\"triggerShare()\"\n                  >\n                    <span>\n                      {{ $t(\"Share this event\") }}\n                      <b-icon icon=\"share\" />\n                    </span>\n                  </b-dropdown-item>\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    @click=\"downloadIcsEvent()\"\n                    v-if=\"!event.draft\"\n                  >\n                    <span>\n                      {{ $t(\"Add to my calendar\") }}\n                      <b-icon icon=\"calendar-plus\" />\n                    </span>\n                  </b-dropdown-item>\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    v-if=\"ableToReport\"\n                    @click=\"isReportModalActive = true\"\n                  >\n                    <span>\n                      {{ $t(\"Report\") }}\n                      <b-icon icon=\"flag\" />\n                    </span>\n                  </b-dropdown-item>\n                </b-dropdown>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n      <div class=\"event-description-wrapper\">\n        <aside class=\"event-metadata\">\n          <div class=\"sticky\">\n            <event-metadata-sidebar\n              v-if=\"event && config\"\n              :event=\"event\"\n              :config=\"config\"\n            />\n          </div>\n        </aside>\n        <div class=\"event-description-comments\">\n          <section class=\"event-description\">\n            <subtitle>{{ $t(\"About this event\") }}</subtitle>\n            <p v-if=\"!event.description\">\n              {{ $t(\"The event organizer didn't add any description.\") }}\n            </p>\n            <div v-else>\n              <div\n                class=\"description-content\"\n                ref=\"eventDescriptionElement\"\n                v-html=\"event.description\"\n              />\n            </div>\n          </section>\n          <section class=\"integration-wrappers\">\n            <component\n              v-for=\"(metadata, integration) in integrations\"\n              :is=\"integration\"\n              :key=\"integration\"\n              :metadata=\"metadata\"\n            />\n          </section>\n          <section class=\"comments\" ref=\"commentsObserver\">\n            <a href=\"#comments\">\n              <subtitle id=\"comments\">{{ $t(\"Comments\") }}</subtitle>\n            </a>\n            <comment-tree v-if=\"loadComments\" :event=\"event\" />\n          </section>\n        </div>\n      </div>\n      <section\n        class=\"more-events section\"\n        v-if=\"event.relatedEvents.length > 0\"\n      >\n        <h3 class=\"title has-text-centered\">\n          {{ $t(\"These events may interest you\") }}\n        </h3>\n        <div class=\"columns\">\n          <div\n            class=\"column is-one-third-desktop\"\n            v-for=\"relatedEvent in event.relatedEvents\"\n            :key=\"relatedEvent.uuid\"\n          >\n            <EventCard :event=\"relatedEvent\" />\n          </div>\n        </div>\n      </section>\n      <b-modal\n        :active.sync=\"isReportModalActive\"\n        has-modal-card\n        ref=\"reportModal\"\n      >\n        <report-modal\n          :on-confirm=\"reportEvent\"\n          :title=\"$t('Report this event')\"\n          :outside-domain=\"organizerDomain\"\n          @close=\"$refs.reportModal.close()\"\n        />\n      </b-modal>\n      <b-modal\n        :active.sync=\"isShareModalActive\"\n        has-modal-card\n        ref=\"shareModal\"\n      >\n        <share-event-modal :event=\"event\" :eventCapacityOK=\"eventCapacityOK\" />\n      </b-modal>\n      <b-modal\n        :active.sync=\"isJoinModalActive\"\n        has-modal-card\n        ref=\"participationModal\"\n      >\n        <identity-picker v-model=\"identity\">\n          <template v-slot:footer>\n            <footer class=\"modal-card-foot\">\n              <button\n                class=\"button\"\n                ref=\"cancelButton\"\n                @click=\"isJoinModalActive = false\"\n              >\n                {{ $t(\"Cancel\") }}\n              </button>\n              <button\n                class=\"button is-primary\"\n                ref=\"confirmButton\"\n                @click=\"\n                  event.joinOptions === EventJoinOptions.RESTRICTED\n                    ? joinEventWithConfirmation(identity)\n                    : joinEvent(identity)\n                \"\n              >\n                {{ $t(\"Confirm my particpation\") }}\n              </button>\n            </footer>\n          </template>\n        </identity-picker>\n      </b-modal>\n      <b-modal\n        :active.sync=\"isJoinConfirmationModalActive\"\n        has-modal-card\n        ref=\"joinConfirmationModal\"\n      >\n        <div class=\"modal-card\">\n          <header class=\"modal-card-head\">\n            <p class=\"modal-card-title\">\n              {{ $t(\"Participation confirmation\") }}\n            </p>\n          </header>\n\n          <section class=\"modal-card-body\">\n            <p>\n              {{\n                $t(\n                  \"The event organiser has chosen to validate manually participations. Do you want to add a little note to explain why you want to participate to this event?\"\n                )\n              }}\n            </p>\n            <form\n              @submit.prevent=\"\n                joinEvent(actorForConfirmation, messageForConfirmation)\n              \"\n            >\n              <b-field :label=\"$t('Message')\">\n                <b-input\n                  type=\"textarea\"\n                  size=\"is-medium\"\n                  v-model=\"messageForConfirmation\"\n                  minlength=\"10\"\n                ></b-input>\n              </b-field>\n              <div class=\"buttons\">\n                <b-button\n                  native-type=\"button\"\n                  class=\"button\"\n                  ref=\"cancelButton\"\n                  @click=\"isJoinConfirmationModalActive = false\"\n                  >{{ $t(\"Cancel\") }}\n                </b-button>\n                <b-button type=\"is-primary\" native-type=\"submit\">\n                  {{ $t(\"Confirm my participation\") }}\n                </b-button>\n              </div>\n            </form>\n          </section>\n        </div>\n      </b-modal>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Watch } from \"vue-property-decorator\";\nimport BIcon from \"buefy/src/components/icon/Icon.vue\";\nimport {\n  EventJoinOptions,\n  EventStatus,\n  EventVisibility,\n  MemberRole,\n  ParticipantRole,\n} from \"@/types/enums\";\nimport {\n  EVENT_PERSON_PARTICIPATION,\n  EVENT_PERSON_PARTICIPATION_SUBSCRIPTION_CHANGED,\n  FETCH_EVENT,\n  JOIN_EVENT,\n} from \"../../graphql/event\";\nimport {\n  CURRENT_ACTOR_CLIENT,\n  PERSON_MEMBERSHIP_GROUP,\n} from \"../../graphql/actor\";\nimport { EventModel, IEvent } from \"../../types/event.model\";\nimport { IActor, IPerson, Person, usernameWithDomain } from \"../../types/actor\";\nimport { GRAPHQL_API_ENDPOINT } from \"../../api/_entrypoint\";\nimport DateCalendarIcon from \"../../components/Event/DateCalendarIcon.vue\";\nimport EventCard from \"../../components/Event/EventCard.vue\";\nimport ReportModal from \"../../components/Report/ReportModal.vue\";\nimport { IReport } from \"../../types/report.model\";\nimport { CREATE_REPORT } from \"../../graphql/report\";\nimport EventMixin from \"../../mixins/event\";\nimport IdentityPicker from \"../Account/IdentityPicker.vue\";\nimport ParticipationSection from \"../../components/Participation/ParticipationSection.vue\";\nimport RouteName from \"../../router/name\";\nimport CommentTree from \"../../components/Comment/CommentTree.vue\";\nimport \"intersection-observer\";\nimport { CONFIG } from \"../../graphql/config\";\nimport {\n  AnonymousParticipationNotFoundError,\n  getLeaveTokenForParticipation,\n  isParticipatingInThisEvent,\n  removeAnonymousParticipation,\n} from \"../../services/AnonymousParticipationStorage\";\nimport { IConfig } from \"../../types/config.model\";\nimport Subtitle from \"../../components/Utils/Subtitle.vue\";\nimport Tag from \"../../components/Tag.vue\";\nimport EventMetadataSidebar from \"../../components/Event/EventMetadataSidebar.vue\";\nimport EventBanner from \"../../components/Event/EventBanner.vue\";\nimport PopoverActorCard from \"../../components/Account/PopoverActorCard.vue\";\nimport { IParticipant } from \"../../types/participant.model\";\nimport { ApolloCache, FetchResult } from \"@apollo/client/core\";\nimport { IEventMetadataDescription } from \"@/types/event-metadata\";\nimport { eventMetaDataList } from \"../../services/EventMetadata\";\n\n// noinspection TypeScriptValidateTypes\n@Component({\n  components: {\n    Subtitle,\n    EventCard,\n    BIcon,\n    DateCalendarIcon,\n    ReportModal,\n    IdentityPicker,\n    ParticipationSection,\n    CommentTree,\n    Tag,\n    PopoverActorCard,\n    EventBanner,\n    EventMetadataSidebar,\n    ShareEventModal: () =>\n      import(\n        /* webpackChunkName: \"shareEventModal\" */ \"../../components/Event/ShareEventModal.vue\"\n      ),\n    \"integration-twitch\": () =>\n      import(\n        /* webpackChunkName: \"twitchIntegration\" */ \"../../components/Event/Integrations/Twitch.vue\"\n      ),\n    \"integration-peertube\": () =>\n      import(\n        /* webpackChunkName: \"PeerTubeIntegration\" */ \"../../components/Event/Integrations/PeerTube.vue\"\n      ),\n    \"integration-youtube\": () =>\n      import(\n        /* webpackChunkName: \"YouTubeIntegration\" */ \"../../components/Event/Integrations/YouTube.vue\"\n      ),\n    \"integration-jitsi-meet\": () =>\n      import(\n        /* webpackChunkName: \"JitsiMeetIntegration\" */ \"../../components/Event/Integrations/JitsiMeet.vue\"\n      ),\n    \"integration-etherpad\": () =>\n      import(\n        /* webpackChunkName: \"EtherpadIntegration\" */ \"../../components/Event/Integrations/Etherpad.vue\"\n      ),\n  },\n  apollo: {\n    event: {\n      query: FETCH_EVENT,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        return {\n          uuid: this.uuid,\n        };\n      },\n      error({ graphQLErrors }) {\n        this.handleErrors(graphQLErrors);\n      },\n    },\n    currentActor: {\n      query: CURRENT_ACTOR_CLIENT,\n    },\n    participations: {\n      query: EVENT_PERSON_PARTICIPATION,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        return {\n          eventId: this.event.id,\n          actorId: this.currentActor.id,\n        };\n      },\n      subscribeToMore: {\n        document: EVENT_PERSON_PARTICIPATION_SUBSCRIPTION_CHANGED,\n        variables() {\n          return {\n            eventId: this.event.id,\n            actorId: this.currentActor.id,\n          };\n        },\n      },\n      update: (data) => {\n        if (data && data.person) return data.person.participations.elements;\n        return [];\n      },\n      skip() {\n        return (\n          !this.currentActor ||\n          !this.event ||\n          !this.event.id ||\n          !this.currentActor.id\n        );\n      },\n    },\n    person: {\n      query: PERSON_MEMBERSHIP_GROUP,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        return {\n          id: this.currentActor.id,\n          group: usernameWithDomain(this.event?.attributedTo),\n        };\n      },\n      skip() {\n        return (\n          !this.currentActor.id ||\n          !this.event?.attributedTo ||\n          !this.event?.attributedTo?.preferredUsername\n        );\n      },\n    },\n    config: CONFIG,\n  },\n  metaInfo() {\n    return {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      title: this.eventTitle,\n      meta: [\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        { name: \"description\", content: this.eventDescription },\n      ],\n    };\n  },\n})\nexport default class Event extends EventMixin {\n  @Prop({ type: String, required: true }) uuid!: string;\n\n  event: IEvent = new EventModel();\n\n  currentActor!: IPerson;\n\n  identity: IPerson = new Person();\n\n  config!: IConfig;\n\n  person!: IPerson;\n\n  participations: IParticipant[] = [];\n\n  oldParticipationRole!: string;\n\n  isReportModalActive = false;\n\n  isShareModalActive = false;\n\n  isJoinModalActive = false;\n\n  isJoinConfirmationModalActive = false;\n\n  EventVisibility = EventVisibility;\n\n  EventStatus = EventStatus;\n\n  EventJoinOptions = EventJoinOptions;\n\n  usernameWithDomain = usernameWithDomain;\n\n  RouteName = RouteName;\n\n  observer!: IntersectionObserver;\n\n  loadComments = false;\n\n  anonymousParticipation: boolean | null = null;\n\n  actorForConfirmation!: IPerson;\n\n  messageForConfirmation = \"\";\n\n  get eventTitle(): undefined | string {\n    if (!this.event) return undefined;\n    return this.event.title;\n  }\n\n  get eventDescription(): undefined | string {\n    if (!this.event) return undefined;\n    return this.event.description;\n  }\n\n  async mounted(): Promise<void> {\n    this.identity = this.currentActor;\n    if (this.$route.hash.includes(\"#comment-\")) {\n      this.loadComments = true;\n    }\n\n    try {\n      if (window.isSecureContext) {\n        this.anonymousParticipation =\n          await this.anonymousParticipationConfirmed();\n      }\n    } catch (e) {\n      if (e instanceof AnonymousParticipationNotFoundError) {\n        this.anonymousParticipation = null;\n      } else {\n        console.error(e);\n      }\n    }\n\n    this.observer = new IntersectionObserver(\n      (entries) => {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const entry of entries) {\n          if (entry) {\n            this.loadComments = entry.isIntersecting || this.loadComments;\n          }\n        }\n      },\n      {\n        rootMargin: \"-50px 0px -50px\",\n      }\n    );\n    this.observer.observe(this.$refs.commentsObserver as Element);\n\n    this.$watch(\"eventDescription\", (eventDescription) => {\n      if (!eventDescription) return;\n      const eventDescriptionElement = this.$refs\n        .eventDescriptionElement as HTMLElement;\n\n      eventDescriptionElement.addEventListener(\"click\", ($event) => {\n        // TODO: Find the right type for target\n        let { target }: { target: any } = $event;\n        while (target && target.tagName !== \"A\") target = target.parentNode;\n        // handle only links that occur inside the component and do not reference external resources\n        if (target && target.matches(\".hashtag\") && target.href) {\n          // some sanity checks taken from vue-router:\n          // https://github.com/vuejs/vue-router/blob/dev/src/components/link.js#L106\n          const {\n            altKey,\n            ctrlKey,\n            metaKey,\n            shiftKey,\n            button,\n            defaultPrevented,\n          } = $event;\n          // don't handle with control keys\n          if (metaKey || altKey || ctrlKey || shiftKey) return;\n          // don't handle when preventDefault called\n          if (defaultPrevented) return;\n          // don't handle right clicks\n          if (button !== undefined && button !== 0) return;\n          // don't handle if `target=\"_blank\"`\n          if (target && target.getAttribute) {\n            const linkTarget = target.getAttribute(\"target\");\n            if (/\\b_blank\\b/i.test(linkTarget)) return;\n          }\n          // don't handle same page links/anchors\n          const url = new URL(target.href);\n          const to = url.pathname;\n          if (window.location.pathname !== to && $event.preventDefault) {\n            $event.preventDefault();\n            this.$router.push(to);\n          }\n        }\n      });\n    });\n\n    this.$on(\"event-deleted\", () => {\n      return this.$router.push({ name: RouteName.HOME });\n    });\n  }\n\n  /**\n   * Delete the event, then redirect to home.\n   */\n  async openDeleteEventModalWrapper(): Promise<void> {\n    await this.openDeleteEventModal(this.event);\n  }\n\n  async reportEvent(content: string, forward: boolean): Promise<void> {\n    this.isReportModalActive = false;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.$refs.reportModal.close();\n    if (!this.organizer) return;\n    const eventTitle = this.event.title;\n\n    try {\n      await this.$apollo.mutate<IReport>({\n        mutation: CREATE_REPORT,\n        variables: {\n          eventId: this.event.id,\n          reportedId: this.organizer ? this.organizer.id : null,\n          content,\n          forward,\n        },\n      });\n      this.$notifier.success(\n        this.$t(\"Event {eventTitle} reported\", { eventTitle }) as string\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  joinEventWithConfirmation(actor: IPerson): void {\n    this.isJoinConfirmationModalActive = true;\n    this.actorForConfirmation = actor;\n  }\n\n  async joinEvent(\n    identity: IPerson,\n    message: string | null = null\n  ): Promise<void> {\n    this.isJoinConfirmationModalActive = false;\n    this.isJoinModalActive = false;\n    try {\n      const { data: mutationData } = await this.$apollo.mutate<{\n        joinEvent: IParticipant;\n      }>({\n        mutation: JOIN_EVENT,\n        variables: {\n          eventId: this.event.id,\n          actorId: identity.id,\n          message,\n        },\n        update: (\n          store: ApolloCache<{\n            joinEvent: IParticipant;\n          }>,\n          { data }: FetchResult\n        ) => {\n          if (data == null) return;\n\n          const participationCachedData = store.readQuery<{ person: IPerson }>({\n            query: EVENT_PERSON_PARTICIPATION,\n            variables: { eventId: this.event.id, actorId: identity.id },\n          });\n\n          if (participationCachedData?.person == undefined) {\n            console.error(\n              \"Cannot update participation cache, because of null value.\"\n            );\n            return;\n          }\n          store.writeQuery({\n            query: EVENT_PERSON_PARTICIPATION,\n            variables: { eventId: this.event.id, actorId: identity.id },\n            data: {\n              person: {\n                ...participationCachedData?.person,\n                participations: {\n                  elements: [data.joinEvent],\n                  total: 1,\n                },\n              },\n            },\n          });\n\n          const cachedData = store.readQuery<{ event: IEvent }>({\n            query: FETCH_EVENT,\n            variables: { uuid: this.event.uuid },\n          });\n          if (cachedData == null) return;\n          const { event } = cachedData;\n          if (event === null) {\n            console.error(\n              \"Cannot update event participant cache, because of null value.\"\n            );\n            return;\n          }\n          const participantStats = { ...event.participantStats };\n\n          if (data.joinEvent.role === ParticipantRole.NOT_APPROVED) {\n            participantStats.notApproved += 1;\n          } else {\n            participantStats.going += 1;\n            participantStats.participant += 1;\n          }\n\n          store.writeQuery({\n            query: FETCH_EVENT,\n            variables: { uuid: this.uuid },\n            data: {\n              event: {\n                ...event,\n                participantStats,\n              },\n            },\n          });\n        },\n      });\n      if (mutationData) {\n        if (mutationData.joinEvent.role === ParticipantRole.NOT_APPROVED) {\n          this.participationRequestedMessage();\n        } else {\n          this.participationConfirmedMessage();\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  confirmLeave(): void {\n    this.$buefy.dialog.confirm({\n      title: this.$t('Leaving event \"{title}\"', {\n        title: this.event.title,\n      }) as string,\n      message: this.$t(\n        'Are you sure you want to cancel your participation at event \"{title}\"?',\n        {\n          title: this.event.title,\n        }\n      ) as string,\n      confirmText: this.$t(\"Leave event\") as string,\n      cancelText: this.$t(\"Cancel\") as string,\n      type: \"is-danger\",\n      hasIcon: true,\n      onConfirm: () => {\n        if (this.currentActor.id) {\n          this.leaveEvent(this.event, this.currentActor.id);\n        }\n      },\n    });\n  }\n\n  @Watch(\"participations\")\n  watchParticipations(): void {\n    if (this.participations.length > 0) {\n      if (\n        this.oldParticipationRole &&\n        this.participations[0].role !== ParticipantRole.NOT_APPROVED &&\n        this.oldParticipationRole !== this.participations[0].role\n      ) {\n        switch (this.participations[0].role) {\n          case ParticipantRole.PARTICIPANT:\n            this.participationConfirmedMessage();\n            break;\n          case ParticipantRole.REJECTED:\n            this.participationRejectedMessage();\n            break;\n          default:\n            this.participationChangedMessage();\n            break;\n        }\n      }\n      this.oldParticipationRole = this.participations[0].role;\n    }\n  }\n\n  private participationConfirmedMessage() {\n    this.$notifier.success(\n      this.$t(\"Your participation has been confirmed\") as string\n    );\n  }\n\n  private participationRequestedMessage() {\n    this.$notifier.success(\n      this.$t(\"Your participation has been requested\") as string\n    );\n  }\n\n  private participationRejectedMessage() {\n    this.$notifier.error(\n      this.$t(\"Your participation has been rejected\") as string\n    );\n  }\n\n  private participationChangedMessage() {\n    this.$notifier.info(\n      this.$t(\"Your participation status has been changed\") as string\n    );\n  }\n\n  async downloadIcsEvent(): Promise<void> {\n    const data = await (\n      await fetch(`${GRAPHQL_API_ENDPOINT}/events/${this.uuid}/export/ics`)\n    ).text();\n    const blob = new Blob([data], { type: \"text/calendar\" });\n    const link = document.createElement(\"a\");\n    link.href = window.URL.createObjectURL(blob);\n    link.download = `${this.event.title}.ics`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  triggerShare(): void {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore-start\n    if (navigator.share) {\n      navigator\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        .share({\n          title: this.event.title,\n          url: this.event.url,\n        })\n        .then(() => console.log(\"Successful share\"))\n        .catch((error: any) => console.log(\"Error sharing\", error));\n    } else {\n      this.isShareModalActive = true;\n      // send popup\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore-end\n  }\n\n  handleErrors(errors: any[]): void {\n    if (\n      errors.some((error) => error.status_code === 404) ||\n      errors.some(({ message }) => message.includes(\"has invalid value $uuid\"))\n    ) {\n      this.$router.replace({ name: RouteName.PAGE_NOT_FOUND });\n    }\n  }\n\n  get actorIsParticipant(): boolean {\n    if (this.actorIsOrganizer) return true;\n\n    return (\n      this.participations.length > 0 &&\n      this.participations[0].role === ParticipantRole.PARTICIPANT\n    );\n  }\n\n  get actorIsOrganizer(): boolean {\n    return (\n      this.participations.length > 0 &&\n      this.participations[0].role === ParticipantRole.CREATOR\n    );\n  }\n\n  get hasGroupPrivileges(): boolean {\n    return (\n      this.person?.memberships?.total > 0 &&\n      [MemberRole.MODERATOR, MemberRole.ADMINISTRATOR].includes(\n        this.person?.memberships?.elements[0].role\n      )\n    );\n  }\n\n  get canManageEvent(): boolean {\n    return this.actorIsOrganizer || this.hasGroupPrivileges;\n  }\n\n  get endDate(): Date {\n    return this.event.endsOn !== null && this.event.endsOn > this.event.beginsOn\n      ? this.event.endsOn\n      : this.event.beginsOn;\n  }\n\n  get eventCapacityOK(): boolean {\n    if (this.event.draft) return true;\n    if (!this.event.options.maximumAttendeeCapacity) return true;\n    return (\n      this.event.options.maximumAttendeeCapacity >\n      this.event.participantStats.participant\n    );\n  }\n\n  get numberOfPlacesStillAvailable(): number {\n    if (this.event.draft) return this.event.options.maximumAttendeeCapacity;\n    return (\n      this.event.options.maximumAttendeeCapacity -\n      this.event.participantStats.participant\n    );\n  }\n\n  async anonymousParticipationConfirmed(): Promise<boolean> {\n    return isParticipatingInThisEvent(this.uuid);\n  }\n\n  async cancelAnonymousParticipation(): Promise<void> {\n    const token = (await getLeaveTokenForParticipation(this.uuid)) as string;\n    await this.leaveEvent(this.event, this.config.anonymous.actorId, token);\n    await removeAnonymousParticipation(this.uuid);\n    this.anonymousParticipation = null;\n  }\n\n  get ableToReport(): boolean {\n    return (\n      this.config &&\n      (this.currentActor.id != null || this.config.anonymous.reports.allowed)\n    );\n  }\n\n  get organizer(): IActor | null {\n    if (this.event.attributedTo && this.event.attributedTo.id) {\n      return this.event.attributedTo;\n    }\n    if (this.event.organizerActor) {\n      return this.event.organizerActor;\n    }\n    return null;\n  }\n\n  get organizerDomain(): string | null {\n    if (this.organizer) {\n      return this.organizer.domain;\n    }\n    return null;\n  }\n\n  metadataToComponent: Record<string, string> = {\n    \"mz:live:twitch:url\": \"integration-twitch\",\n    \"mz:live:peertube:url\": \"integration-peertube\",\n    \"mz:live:youtube:url\": \"integration-youtube\",\n    \"mz:visio:jitsi_meet\": \"integration-jitsi-meet\",\n    \"mz:notes:etherpad:url\": \"integration-etherpad\",\n  };\n\n  get integrations(): Record<string, IEventMetadataDescription> {\n    return this.event.metadata\n      .map((val) => {\n        const def = eventMetaDataList.find((dat) => dat.key === val.key);\n        return {\n          ...def,\n          ...val,\n        };\n      })\n      .reduce((acc: Record<string, IEventMetadataDescription>, metadata) => {\n        const component = this.metadataToComponent[metadata.key];\n        if (component !== undefined) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          acc[component] = metadata;\n        }\n        return acc;\n      }, {});\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.section {\n  padding: 1rem 2rem 4rem;\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\ndiv.sidebar {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n\n  position: relative;\n\n  &::before {\n    content: \"\";\n    background: #b3b3b2;\n    position: absolute;\n    bottom: 30px;\n    top: 30px;\n    left: 0;\n    height: calc(100% - 60px);\n    width: 1px;\n  }\n\n  div.organizer {\n    display: inline-flex;\n    padding-top: 10px;\n\n    a {\n      color: #4a4a4a;\n\n      span {\n        line-height: 2.7rem;\n        padding-right: 6px;\n      }\n    }\n  }\n}\n\n.intro {\n  background: white;\n\n  .is-3-tablet {\n    width: initial;\n  }\n\n  p.tags {\n    a {\n      text-decoration: none;\n    }\n\n    span {\n      &.tag {\n        margin: 0 2px;\n      }\n    }\n  }\n}\n\n.event-description-wrapper {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  padding: 0;\n\n  @media all and (min-width: 672px) {\n    flex-direction: row-reverse;\n  }\n\n  & > aside,\n  & > div {\n    @media all and (min-width: 672px) {\n      margin: 2rem auto;\n    }\n  }\n\n  aside.event-metadata {\n    min-width: 20rem;\n    flex: 1;\n    @media all and (min-width: 672px) {\n      padding-left: 1rem;\n    }\n\n    .sticky {\n      position: sticky;\n      background: white;\n      top: 50px;\n      padding: 1rem;\n    }\n  }\n\n  div.event-description-comments {\n    min-width: 20rem;\n    padding: 1rem;\n    flex: 2;\n    background: white;\n  }\n\n  .description-content {\n    ::v-deep h1 {\n      font-size: 2rem;\n    }\n\n    ::v-deep h2 {\n      font-size: 1.5rem;\n    }\n\n    ::v-deep h3 {\n      font-size: 1.25rem;\n    }\n\n    ::v-deep ul {\n      list-style-type: disc;\n    }\n\n    ::v-deep li {\n      margin: 10px auto 10px 2rem;\n    }\n\n    ::v-deep blockquote {\n      border-left: 0.2em solid #333;\n      display: block;\n      padding-left: 1em;\n    }\n\n    ::v-deep p {\n      margin: 10px auto;\n\n      a {\n        display: inline-block;\n        padding: 0.3rem;\n        background: $secondary;\n        color: #111;\n\n        &:empty {\n          display: none;\n        }\n      }\n    }\n  }\n}\n\n.comments {\n  padding-top: 3rem;\n\n  a h3#comments {\n    margin-bottom: 10px;\n  }\n}\n\n.more-events {\n  background: white;\n  padding: 1rem 1rem 4rem;\n\n  & > .title {\n    font-size: 1.5rem;\n  }\n}\n\n.dropdown .dropdown-trigger span {\n  cursor: pointer;\n}\n\na.dropdown-item,\n.dropdown .dropdown-menu .has-link a,\nbutton.dropdown-item {\n  white-space: nowrap;\n  width: 100%;\n  padding-right: 1rem;\n  text-align: right;\n}\n\na.participations-link {\n  text-decoration: none;\n}\n\n.event-status .tag {\n  font-size: 1rem;\n}\n\n.no-border {\n  border: 0;\n  cursor: auto;\n}\n\n.wrapper,\n.intro-wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.intro-wrapper {\n  position: relative;\n  padding: 0 16px 16px;\n  background: #fff;\n\n  .date-calendar-icon-wrapper {\n    margin-top: 16px;\n    height: 0;\n    display: flex;\n    align-items: flex-end;\n    align-self: flex-start;\n    margin-bottom: 7px;\n    margin-left: 0rem;\n  }\n}\n.title {\n  margin: 0;\n  font-size: 2rem;\n}\n</style>\n"
      },
      {
        "file": "js/src/views/Event/Event.vue",
        "description": "## Hyperlink with router 4/5 - variable in GraphQL\n\nThe GraphQL query can then rely on the prop `uuid` from the component.\nThis way GraphQL can use it as `$uuid` named variable.",
        "line": 551,
        "contents": "<template>\n  <div class=\"container\">\n    <b-loading :active.sync=\"$apollo.queries.event.loading\" />\n    <div class=\"wrapper\">\n      <event-banner :picture=\"event.picture\" />\n      <div class=\"intro-wrapper\">\n        <div class=\"date-calendar-icon-wrapper\">\n          <date-calendar-icon :date=\"event.beginsOn\" />\n        </div>\n        <section class=\"intro\">\n          <div class=\"columns\">\n            <div class=\"column\">\n              <h1 class=\"title\" style=\"margin: 0\">{{ event.title }}</h1>\n              <div class=\"organizer\">\n                <span v-if=\"event.organizerActor && !event.attributedTo\">\n                  <popover-actor-card\n                    :actor=\"event.organizerActor\"\n                    :inline=\"true\"\n                  >\n                    <span>\n                      {{\n                        $t(\"By @{username}\", {\n                          username: usernameWithDomain(event.organizerActor),\n                        })\n                      }}\n                    </span>\n                  </popover-actor-card>\n                </span>\n                <span\n                  v-else-if=\"\n                    event.attributedTo &&\n                    event.options.hideOrganizerWhenGroupEvent\n                  \"\n                >\n                  <popover-actor-card\n                    :actor=\"event.attributedTo\"\n                    :inline=\"true\"\n                  >\n                    {{\n                      $t(\"By @{group}\", {\n                        group: usernameWithDomain(event.attributedTo),\n                      })\n                    }}\n                  </popover-actor-card>\n                </span>\n                <span v-else-if=\"event.organizerActor && event.attributedTo\">\n                  <i18n path=\"By {group}\">\n                    <popover-actor-card\n                      :actor=\"event.attributedTo\"\n                      slot=\"group\"\n                      :inline=\"true\"\n                    >\n                      <router-link\n                        :to=\"{\n                          name: RouteName.GROUP,\n                          params: {\n                            preferredUsername: usernameWithDomain(\n                              event.attributedTo\n                            ),\n                          },\n                        }\"\n                      >\n                        {{\n                          $t(\"@{group}\", {\n                            group: usernameWithDomain(event.attributedTo),\n                          })\n                        }}\n                      </router-link>\n                    </popover-actor-card>\n                  </i18n>\n                </span>\n              </div>\n              <p class=\"tags\" v-if=\"event.tags && event.tags.length > 0\">\n                <router-link\n                  v-for=\"tag in event.tags\"\n                  :key=\"tag.title\"\n                  :to=\"{ name: RouteName.TAG, params: { tag: tag.title } }\"\n                >\n                  <tag>{{ tag.title }}</tag>\n                </router-link>\n              </p>\n              <b-tag type=\"is-warning\" size=\"is-medium\" v-if=\"event.draft\"\n                >{{ $t(\"Draft\") }}\n              </b-tag>\n              <span\n                class=\"event-status\"\n                v-if=\"event.status !== EventStatus.CONFIRMED\"\n              >\n                <b-tag\n                  type=\"is-warning\"\n                  v-if=\"event.status === EventStatus.TENTATIVE\"\n                  >{{ $t(\"Event to be confirmed\") }}</b-tag\n                >\n                <b-tag\n                  type=\"is-danger\"\n                  v-if=\"event.status === EventStatus.CANCELLED\"\n                  >{{ $t(\"Event cancelled\") }}</b-tag\n                >\n              </span>\n            </div>\n            <div class=\"column is-3-tablet\">\n              <participation-section\n                :participation=\"participations[0]\"\n                :event=\"event\"\n                :anonymousParticipation=\"anonymousParticipation\"\n                @join-event=\"joinEvent\"\n                @join-modal=\"isJoinModalActive = true\"\n                @join-event-with-confirmation=\"joinEventWithConfirmation\"\n                @confirm-leave=\"confirmLeave\"\n                @cancel-anonymous-participation=\"cancelAnonymousParticipation\"\n              />\n              <div class=\"has-text-right\">\n                <template class=\"visibility\" v-if=\"!event.draft\">\n                  <p v-if=\"event.visibility === EventVisibility.PUBLIC\">\n                    {{ $t(\"Public event\") }}\n                    <b-icon icon=\"earth\" />\n                  </p>\n                  <p v-if=\"event.visibility === EventVisibility.UNLISTED\">\n                    {{ $t(\"Private event\") }}\n                    <b-icon icon=\"link\" />\n                  </p>\n                </template>\n                <template v-if=\"!event.local && organizer.domain\">\n                  <a :href=\"event.url\">\n                    <tag>{{ organizer.domain }}</tag>\n                  </a>\n                </template>\n                <p>\n                  <router-link\n                    class=\"participations-link\"\n                    v-if=\"canManageEvent && event.draft === false\"\n                    :to=\"{\n                      name: RouteName.PARTICIPATIONS,\n                      params: { eventId: event.uuid },\n                    }\"\n                  >\n                    <!-- We retire one because of the event creator who is a participant -->\n                    <span v-if=\"event.options.maximumAttendeeCapacity\">\n                      {{\n                        $tc(\n                          \"{available}/{capacity} available places\",\n                          event.options.maximumAttendeeCapacity -\n                            event.participantStats.participant,\n                          {\n                            available:\n                              event.options.maximumAttendeeCapacity -\n                              event.participantStats.participant,\n                            capacity: event.options.maximumAttendeeCapacity,\n                          }\n                        )\n                      }}\n                    </span>\n                    <span v-else>\n                      {{\n                        $tc(\n                          \"No one is participating|One person participating|{going} people participating\",\n                          event.participantStats.participant,\n                          {\n                            going: event.participantStats.participant,\n                          }\n                        )\n                      }}\n                    </span>\n                  </router-link>\n                  <span v-else>\n                    <span v-if=\"event.options.maximumAttendeeCapacity\">\n                      {{\n                        $tc(\n                          \"{available}/{capacity} available places\",\n                          event.options.maximumAttendeeCapacity -\n                            event.participantStats.participant,\n                          {\n                            available:\n                              event.options.maximumAttendeeCapacity -\n                              event.participantStats.participant,\n                            capacity: event.options.maximumAttendeeCapacity,\n                          }\n                        )\n                      }}\n                    </span>\n                    <span v-else>\n                      {{\n                        $tc(\n                          \"No one is participating|One person participating|{going} people participating\",\n                          event.participantStats.participant,\n                          {\n                            going: event.participantStats.participant,\n                          }\n                        )\n                      }}\n                    </span>\n                  </span>\n                  <b-tooltip\n                    type=\"is-dark\"\n                    v-if=\"!event.local\"\n                    :label=\"\n                      $t(\n                        'The actual number of participants may differ, as this event is hosted on another instance.'\n                      )\n                    \"\n                  >\n                    <b-icon size=\"is-small\" icon=\"help-circle-outline\" />\n                  </b-tooltip>\n                  <b-icon icon=\"ticket-confirmation-outline\" />\n                </p>\n                <b-dropdown position=\"is-bottom-left\" aria-role=\"list\">\n                  <b-button\n                    slot=\"trigger\"\n                    role=\"button\"\n                    icon-right=\"dots-horizontal\"\n                  >\n                    {{ $t(\"Actions\") }}\n                  </b-button>\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    has-link\n                    v-if=\"canManageEvent || event.draft\"\n                  >\n                    <router-link\n                      :to=\"{\n                        name: RouteName.EDIT_EVENT,\n                        params: { eventId: event.uuid },\n                      }\"\n                    >\n                      {{ $t(\"Edit\") }}\n                      <b-icon icon=\"pencil\" />\n                    </router-link>\n                  </b-dropdown-item>\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    has-link\n                    v-if=\"canManageEvent || event.draft\"\n                  >\n                    <router-link\n                      :to=\"{\n                        name: RouteName.DUPLICATE_EVENT,\n                        params: { eventId: event.uuid },\n                      }\"\n                    >\n                      {{ $t(\"Duplicate\") }}\n                      <b-icon icon=\"content-duplicate\" />\n                    </router-link>\n                  </b-dropdown-item>\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    v-if=\"canManageEvent || event.draft\"\n                    @click=\"openDeleteEventModalWrapper\"\n                  >\n                    {{ $t(\"Delete\") }}\n                    <b-icon icon=\"delete\" />\n                  </b-dropdown-item>\n\n                  <hr\n                    class=\"dropdown-divider\"\n                    aria-role=\"menuitem\"\n                    v-if=\"canManageEvent || event.draft\"\n                  />\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    v-if=\"!event.draft\"\n                    @click=\"triggerShare()\"\n                  >\n                    <span>\n                      {{ $t(\"Share this event\") }}\n                      <b-icon icon=\"share\" />\n                    </span>\n                  </b-dropdown-item>\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    @click=\"downloadIcsEvent()\"\n                    v-if=\"!event.draft\"\n                  >\n                    <span>\n                      {{ $t(\"Add to my calendar\") }}\n                      <b-icon icon=\"calendar-plus\" />\n                    </span>\n                  </b-dropdown-item>\n                  <b-dropdown-item\n                    aria-role=\"listitem\"\n                    v-if=\"ableToReport\"\n                    @click=\"isReportModalActive = true\"\n                  >\n                    <span>\n                      {{ $t(\"Report\") }}\n                      <b-icon icon=\"flag\" />\n                    </span>\n                  </b-dropdown-item>\n                </b-dropdown>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n      <div class=\"event-description-wrapper\">\n        <aside class=\"event-metadata\">\n          <div class=\"sticky\">\n            <event-metadata-sidebar\n              v-if=\"event && config\"\n              :event=\"event\"\n              :config=\"config\"\n            />\n          </div>\n        </aside>\n        <div class=\"event-description-comments\">\n          <section class=\"event-description\">\n            <subtitle>{{ $t(\"About this event\") }}</subtitle>\n            <p v-if=\"!event.description\">\n              {{ $t(\"The event organizer didn't add any description.\") }}\n            </p>\n            <div v-else>\n              <div\n                class=\"description-content\"\n                ref=\"eventDescriptionElement\"\n                v-html=\"event.description\"\n              />\n            </div>\n          </section>\n          <section class=\"integration-wrappers\">\n            <component\n              v-for=\"(metadata, integration) in integrations\"\n              :is=\"integration\"\n              :key=\"integration\"\n              :metadata=\"metadata\"\n            />\n          </section>\n          <section class=\"comments\" ref=\"commentsObserver\">\n            <a href=\"#comments\">\n              <subtitle id=\"comments\">{{ $t(\"Comments\") }}</subtitle>\n            </a>\n            <comment-tree v-if=\"loadComments\" :event=\"event\" />\n          </section>\n        </div>\n      </div>\n      <section\n        class=\"more-events section\"\n        v-if=\"event.relatedEvents.length > 0\"\n      >\n        <h3 class=\"title has-text-centered\">\n          {{ $t(\"These events may interest you\") }}\n        </h3>\n        <div class=\"columns\">\n          <div\n            class=\"column is-one-third-desktop\"\n            v-for=\"relatedEvent in event.relatedEvents\"\n            :key=\"relatedEvent.uuid\"\n          >\n            <EventCard :event=\"relatedEvent\" />\n          </div>\n        </div>\n      </section>\n      <b-modal\n        :active.sync=\"isReportModalActive\"\n        has-modal-card\n        ref=\"reportModal\"\n      >\n        <report-modal\n          :on-confirm=\"reportEvent\"\n          :title=\"$t('Report this event')\"\n          :outside-domain=\"organizerDomain\"\n          @close=\"$refs.reportModal.close()\"\n        />\n      </b-modal>\n      <b-modal\n        :active.sync=\"isShareModalActive\"\n        has-modal-card\n        ref=\"shareModal\"\n      >\n        <share-event-modal :event=\"event\" :eventCapacityOK=\"eventCapacityOK\" />\n      </b-modal>\n      <b-modal\n        :active.sync=\"isJoinModalActive\"\n        has-modal-card\n        ref=\"participationModal\"\n      >\n        <identity-picker v-model=\"identity\">\n          <template v-slot:footer>\n            <footer class=\"modal-card-foot\">\n              <button\n                class=\"button\"\n                ref=\"cancelButton\"\n                @click=\"isJoinModalActive = false\"\n              >\n                {{ $t(\"Cancel\") }}\n              </button>\n              <button\n                class=\"button is-primary\"\n                ref=\"confirmButton\"\n                @click=\"\n                  event.joinOptions === EventJoinOptions.RESTRICTED\n                    ? joinEventWithConfirmation(identity)\n                    : joinEvent(identity)\n                \"\n              >\n                {{ $t(\"Confirm my particpation\") }}\n              </button>\n            </footer>\n          </template>\n        </identity-picker>\n      </b-modal>\n      <b-modal\n        :active.sync=\"isJoinConfirmationModalActive\"\n        has-modal-card\n        ref=\"joinConfirmationModal\"\n      >\n        <div class=\"modal-card\">\n          <header class=\"modal-card-head\">\n            <p class=\"modal-card-title\">\n              {{ $t(\"Participation confirmation\") }}\n            </p>\n          </header>\n\n          <section class=\"modal-card-body\">\n            <p>\n              {{\n                $t(\n                  \"The event organiser has chosen to validate manually participations. Do you want to add a little note to explain why you want to participate to this event?\"\n                )\n              }}\n            </p>\n            <form\n              @submit.prevent=\"\n                joinEvent(actorForConfirmation, messageForConfirmation)\n              \"\n            >\n              <b-field :label=\"$t('Message')\">\n                <b-input\n                  type=\"textarea\"\n                  size=\"is-medium\"\n                  v-model=\"messageForConfirmation\"\n                  minlength=\"10\"\n                ></b-input>\n              </b-field>\n              <div class=\"buttons\">\n                <b-button\n                  native-type=\"button\"\n                  class=\"button\"\n                  ref=\"cancelButton\"\n                  @click=\"isJoinConfirmationModalActive = false\"\n                  >{{ $t(\"Cancel\") }}\n                </b-button>\n                <b-button type=\"is-primary\" native-type=\"submit\">\n                  {{ $t(\"Confirm my participation\") }}\n                </b-button>\n              </div>\n            </form>\n          </section>\n        </div>\n      </b-modal>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Watch } from \"vue-property-decorator\";\nimport BIcon from \"buefy/src/components/icon/Icon.vue\";\nimport {\n  EventJoinOptions,\n  EventStatus,\n  EventVisibility,\n  MemberRole,\n  ParticipantRole,\n} from \"@/types/enums\";\nimport {\n  EVENT_PERSON_PARTICIPATION,\n  EVENT_PERSON_PARTICIPATION_SUBSCRIPTION_CHANGED,\n  FETCH_EVENT,\n  JOIN_EVENT,\n} from \"../../graphql/event\";\nimport {\n  CURRENT_ACTOR_CLIENT,\n  PERSON_MEMBERSHIP_GROUP,\n} from \"../../graphql/actor\";\nimport { EventModel, IEvent } from \"../../types/event.model\";\nimport { IActor, IPerson, Person, usernameWithDomain } from \"../../types/actor\";\nimport { GRAPHQL_API_ENDPOINT } from \"../../api/_entrypoint\";\nimport DateCalendarIcon from \"../../components/Event/DateCalendarIcon.vue\";\nimport EventCard from \"../../components/Event/EventCard.vue\";\nimport ReportModal from \"../../components/Report/ReportModal.vue\";\nimport { IReport } from \"../../types/report.model\";\nimport { CREATE_REPORT } from \"../../graphql/report\";\nimport EventMixin from \"../../mixins/event\";\nimport IdentityPicker from \"../Account/IdentityPicker.vue\";\nimport ParticipationSection from \"../../components/Participation/ParticipationSection.vue\";\nimport RouteName from \"../../router/name\";\nimport CommentTree from \"../../components/Comment/CommentTree.vue\";\nimport \"intersection-observer\";\nimport { CONFIG } from \"../../graphql/config\";\nimport {\n  AnonymousParticipationNotFoundError,\n  getLeaveTokenForParticipation,\n  isParticipatingInThisEvent,\n  removeAnonymousParticipation,\n} from \"../../services/AnonymousParticipationStorage\";\nimport { IConfig } from \"../../types/config.model\";\nimport Subtitle from \"../../components/Utils/Subtitle.vue\";\nimport Tag from \"../../components/Tag.vue\";\nimport EventMetadataSidebar from \"../../components/Event/EventMetadataSidebar.vue\";\nimport EventBanner from \"../../components/Event/EventBanner.vue\";\nimport PopoverActorCard from \"../../components/Account/PopoverActorCard.vue\";\nimport { IParticipant } from \"../../types/participant.model\";\nimport { ApolloCache, FetchResult } from \"@apollo/client/core\";\nimport { IEventMetadataDescription } from \"@/types/event-metadata\";\nimport { eventMetaDataList } from \"../../services/EventMetadata\";\n\n// noinspection TypeScriptValidateTypes\n@Component({\n  components: {\n    Subtitle,\n    EventCard,\n    BIcon,\n    DateCalendarIcon,\n    ReportModal,\n    IdentityPicker,\n    ParticipationSection,\n    CommentTree,\n    Tag,\n    PopoverActorCard,\n    EventBanner,\n    EventMetadataSidebar,\n    ShareEventModal: () =>\n      import(\n        /* webpackChunkName: \"shareEventModal\" */ \"../../components/Event/ShareEventModal.vue\"\n      ),\n    \"integration-twitch\": () =>\n      import(\n        /* webpackChunkName: \"twitchIntegration\" */ \"../../components/Event/Integrations/Twitch.vue\"\n      ),\n    \"integration-peertube\": () =>\n      import(\n        /* webpackChunkName: \"PeerTubeIntegration\" */ \"../../components/Event/Integrations/PeerTube.vue\"\n      ),\n    \"integration-youtube\": () =>\n      import(\n        /* webpackChunkName: \"YouTubeIntegration\" */ \"../../components/Event/Integrations/YouTube.vue\"\n      ),\n    \"integration-jitsi-meet\": () =>\n      import(\n        /* webpackChunkName: \"JitsiMeetIntegration\" */ \"../../components/Event/Integrations/JitsiMeet.vue\"\n      ),\n    \"integration-etherpad\": () =>\n      import(\n        /* webpackChunkName: \"EtherpadIntegration\" */ \"../../components/Event/Integrations/Etherpad.vue\"\n      ),\n  },\n  apollo: {\n    event: {\n      query: FETCH_EVENT,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        return {\n          uuid: this.uuid,\n        };\n      },\n      error({ graphQLErrors }) {\n        this.handleErrors(graphQLErrors);\n      },\n    },\n    currentActor: {\n      query: CURRENT_ACTOR_CLIENT,\n    },\n    participations: {\n      query: EVENT_PERSON_PARTICIPATION,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        return {\n          eventId: this.event.id,\n          actorId: this.currentActor.id,\n        };\n      },\n      subscribeToMore: {\n        document: EVENT_PERSON_PARTICIPATION_SUBSCRIPTION_CHANGED,\n        variables() {\n          return {\n            eventId: this.event.id,\n            actorId: this.currentActor.id,\n          };\n        },\n      },\n      update: (data) => {\n        if (data && data.person) return data.person.participations.elements;\n        return [];\n      },\n      skip() {\n        return (\n          !this.currentActor ||\n          !this.event ||\n          !this.event.id ||\n          !this.currentActor.id\n        );\n      },\n    },\n    person: {\n      query: PERSON_MEMBERSHIP_GROUP,\n      fetchPolicy: \"cache-and-network\",\n      variables() {\n        return {\n          id: this.currentActor.id,\n          group: usernameWithDomain(this.event?.attributedTo),\n        };\n      },\n      skip() {\n        return (\n          !this.currentActor.id ||\n          !this.event?.attributedTo ||\n          !this.event?.attributedTo?.preferredUsername\n        );\n      },\n    },\n    config: CONFIG,\n  },\n  metaInfo() {\n    return {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      title: this.eventTitle,\n      meta: [\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        { name: \"description\", content: this.eventDescription },\n      ],\n    };\n  },\n})\nexport default class Event extends EventMixin {\n  @Prop({ type: String, required: true }) uuid!: string;\n\n  event: IEvent = new EventModel();\n\n  currentActor!: IPerson;\n\n  identity: IPerson = new Person();\n\n  config!: IConfig;\n\n  person!: IPerson;\n\n  participations: IParticipant[] = [];\n\n  oldParticipationRole!: string;\n\n  isReportModalActive = false;\n\n  isShareModalActive = false;\n\n  isJoinModalActive = false;\n\n  isJoinConfirmationModalActive = false;\n\n  EventVisibility = EventVisibility;\n\n  EventStatus = EventStatus;\n\n  EventJoinOptions = EventJoinOptions;\n\n  usernameWithDomain = usernameWithDomain;\n\n  RouteName = RouteName;\n\n  observer!: IntersectionObserver;\n\n  loadComments = false;\n\n  anonymousParticipation: boolean | null = null;\n\n  actorForConfirmation!: IPerson;\n\n  messageForConfirmation = \"\";\n\n  get eventTitle(): undefined | string {\n    if (!this.event) return undefined;\n    return this.event.title;\n  }\n\n  get eventDescription(): undefined | string {\n    if (!this.event) return undefined;\n    return this.event.description;\n  }\n\n  async mounted(): Promise<void> {\n    this.identity = this.currentActor;\n    if (this.$route.hash.includes(\"#comment-\")) {\n      this.loadComments = true;\n    }\n\n    try {\n      if (window.isSecureContext) {\n        this.anonymousParticipation =\n          await this.anonymousParticipationConfirmed();\n      }\n    } catch (e) {\n      if (e instanceof AnonymousParticipationNotFoundError) {\n        this.anonymousParticipation = null;\n      } else {\n        console.error(e);\n      }\n    }\n\n    this.observer = new IntersectionObserver(\n      (entries) => {\n        // eslint-disable-next-line no-restricted-syntax\n        for (const entry of entries) {\n          if (entry) {\n            this.loadComments = entry.isIntersecting || this.loadComments;\n          }\n        }\n      },\n      {\n        rootMargin: \"-50px 0px -50px\",\n      }\n    );\n    this.observer.observe(this.$refs.commentsObserver as Element);\n\n    this.$watch(\"eventDescription\", (eventDescription) => {\n      if (!eventDescription) return;\n      const eventDescriptionElement = this.$refs\n        .eventDescriptionElement as HTMLElement;\n\n      eventDescriptionElement.addEventListener(\"click\", ($event) => {\n        // TODO: Find the right type for target\n        let { target }: { target: any } = $event;\n        while (target && target.tagName !== \"A\") target = target.parentNode;\n        // handle only links that occur inside the component and do not reference external resources\n        if (target && target.matches(\".hashtag\") && target.href) {\n          // some sanity checks taken from vue-router:\n          // https://github.com/vuejs/vue-router/blob/dev/src/components/link.js#L106\n          const {\n            altKey,\n            ctrlKey,\n            metaKey,\n            shiftKey,\n            button,\n            defaultPrevented,\n          } = $event;\n          // don't handle with control keys\n          if (metaKey || altKey || ctrlKey || shiftKey) return;\n          // don't handle when preventDefault called\n          if (defaultPrevented) return;\n          // don't handle right clicks\n          if (button !== undefined && button !== 0) return;\n          // don't handle if `target=\"_blank\"`\n          if (target && target.getAttribute) {\n            const linkTarget = target.getAttribute(\"target\");\n            if (/\\b_blank\\b/i.test(linkTarget)) return;\n          }\n          // don't handle same page links/anchors\n          const url = new URL(target.href);\n          const to = url.pathname;\n          if (window.location.pathname !== to && $event.preventDefault) {\n            $event.preventDefault();\n            this.$router.push(to);\n          }\n        }\n      });\n    });\n\n    this.$on(\"event-deleted\", () => {\n      return this.$router.push({ name: RouteName.HOME });\n    });\n  }\n\n  /**\n   * Delete the event, then redirect to home.\n   */\n  async openDeleteEventModalWrapper(): Promise<void> {\n    await this.openDeleteEventModal(this.event);\n  }\n\n  async reportEvent(content: string, forward: boolean): Promise<void> {\n    this.isReportModalActive = false;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    this.$refs.reportModal.close();\n    if (!this.organizer) return;\n    const eventTitle = this.event.title;\n\n    try {\n      await this.$apollo.mutate<IReport>({\n        mutation: CREATE_REPORT,\n        variables: {\n          eventId: this.event.id,\n          reportedId: this.organizer ? this.organizer.id : null,\n          content,\n          forward,\n        },\n      });\n      this.$notifier.success(\n        this.$t(\"Event {eventTitle} reported\", { eventTitle }) as string\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  joinEventWithConfirmation(actor: IPerson): void {\n    this.isJoinConfirmationModalActive = true;\n    this.actorForConfirmation = actor;\n  }\n\n  async joinEvent(\n    identity: IPerson,\n    message: string | null = null\n  ): Promise<void> {\n    this.isJoinConfirmationModalActive = false;\n    this.isJoinModalActive = false;\n    try {\n      const { data: mutationData } = await this.$apollo.mutate<{\n        joinEvent: IParticipant;\n      }>({\n        mutation: JOIN_EVENT,\n        variables: {\n          eventId: this.event.id,\n          actorId: identity.id,\n          message,\n        },\n        update: (\n          store: ApolloCache<{\n            joinEvent: IParticipant;\n          }>,\n          { data }: FetchResult\n        ) => {\n          if (data == null) return;\n\n          const participationCachedData = store.readQuery<{ person: IPerson }>({\n            query: EVENT_PERSON_PARTICIPATION,\n            variables: { eventId: this.event.id, actorId: identity.id },\n          });\n\n          if (participationCachedData?.person == undefined) {\n            console.error(\n              \"Cannot update participation cache, because of null value.\"\n            );\n            return;\n          }\n          store.writeQuery({\n            query: EVENT_PERSON_PARTICIPATION,\n            variables: { eventId: this.event.id, actorId: identity.id },\n            data: {\n              person: {\n                ...participationCachedData?.person,\n                participations: {\n                  elements: [data.joinEvent],\n                  total: 1,\n                },\n              },\n            },\n          });\n\n          const cachedData = store.readQuery<{ event: IEvent }>({\n            query: FETCH_EVENT,\n            variables: { uuid: this.event.uuid },\n          });\n          if (cachedData == null) return;\n          const { event } = cachedData;\n          if (event === null) {\n            console.error(\n              \"Cannot update event participant cache, because of null value.\"\n            );\n            return;\n          }\n          const participantStats = { ...event.participantStats };\n\n          if (data.joinEvent.role === ParticipantRole.NOT_APPROVED) {\n            participantStats.notApproved += 1;\n          } else {\n            participantStats.going += 1;\n            participantStats.participant += 1;\n          }\n\n          store.writeQuery({\n            query: FETCH_EVENT,\n            variables: { uuid: this.uuid },\n            data: {\n              event: {\n                ...event,\n                participantStats,\n              },\n            },\n          });\n        },\n      });\n      if (mutationData) {\n        if (mutationData.joinEvent.role === ParticipantRole.NOT_APPROVED) {\n          this.participationRequestedMessage();\n        } else {\n          this.participationConfirmedMessage();\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  confirmLeave(): void {\n    this.$buefy.dialog.confirm({\n      title: this.$t('Leaving event \"{title}\"', {\n        title: this.event.title,\n      }) as string,\n      message: this.$t(\n        'Are you sure you want to cancel your participation at event \"{title}\"?',\n        {\n          title: this.event.title,\n        }\n      ) as string,\n      confirmText: this.$t(\"Leave event\") as string,\n      cancelText: this.$t(\"Cancel\") as string,\n      type: \"is-danger\",\n      hasIcon: true,\n      onConfirm: () => {\n        if (this.currentActor.id) {\n          this.leaveEvent(this.event, this.currentActor.id);\n        }\n      },\n    });\n  }\n\n  @Watch(\"participations\")\n  watchParticipations(): void {\n    if (this.participations.length > 0) {\n      if (\n        this.oldParticipationRole &&\n        this.participations[0].role !== ParticipantRole.NOT_APPROVED &&\n        this.oldParticipationRole !== this.participations[0].role\n      ) {\n        switch (this.participations[0].role) {\n          case ParticipantRole.PARTICIPANT:\n            this.participationConfirmedMessage();\n            break;\n          case ParticipantRole.REJECTED:\n            this.participationRejectedMessage();\n            break;\n          default:\n            this.participationChangedMessage();\n            break;\n        }\n      }\n      this.oldParticipationRole = this.participations[0].role;\n    }\n  }\n\n  private participationConfirmedMessage() {\n    this.$notifier.success(\n      this.$t(\"Your participation has been confirmed\") as string\n    );\n  }\n\n  private participationRequestedMessage() {\n    this.$notifier.success(\n      this.$t(\"Your participation has been requested\") as string\n    );\n  }\n\n  private participationRejectedMessage() {\n    this.$notifier.error(\n      this.$t(\"Your participation has been rejected\") as string\n    );\n  }\n\n  private participationChangedMessage() {\n    this.$notifier.info(\n      this.$t(\"Your participation status has been changed\") as string\n    );\n  }\n\n  async downloadIcsEvent(): Promise<void> {\n    const data = await (\n      await fetch(`${GRAPHQL_API_ENDPOINT}/events/${this.uuid}/export/ics`)\n    ).text();\n    const blob = new Blob([data], { type: \"text/calendar\" });\n    const link = document.createElement(\"a\");\n    link.href = window.URL.createObjectURL(blob);\n    link.download = `${this.event.title}.ics`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n\n  triggerShare(): void {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore-start\n    if (navigator.share) {\n      navigator\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        .share({\n          title: this.event.title,\n          url: this.event.url,\n        })\n        .then(() => console.log(\"Successful share\"))\n        .catch((error: any) => console.log(\"Error sharing\", error));\n    } else {\n      this.isShareModalActive = true;\n      // send popup\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore-end\n  }\n\n  handleErrors(errors: any[]): void {\n    if (\n      errors.some((error) => error.status_code === 404) ||\n      errors.some(({ message }) => message.includes(\"has invalid value $uuid\"))\n    ) {\n      this.$router.replace({ name: RouteName.PAGE_NOT_FOUND });\n    }\n  }\n\n  get actorIsParticipant(): boolean {\n    if (this.actorIsOrganizer) return true;\n\n    return (\n      this.participations.length > 0 &&\n      this.participations[0].role === ParticipantRole.PARTICIPANT\n    );\n  }\n\n  get actorIsOrganizer(): boolean {\n    return (\n      this.participations.length > 0 &&\n      this.participations[0].role === ParticipantRole.CREATOR\n    );\n  }\n\n  get hasGroupPrivileges(): boolean {\n    return (\n      this.person?.memberships?.total > 0 &&\n      [MemberRole.MODERATOR, MemberRole.ADMINISTRATOR].includes(\n        this.person?.memberships?.elements[0].role\n      )\n    );\n  }\n\n  get canManageEvent(): boolean {\n    return this.actorIsOrganizer || this.hasGroupPrivileges;\n  }\n\n  get endDate(): Date {\n    return this.event.endsOn !== null && this.event.endsOn > this.event.beginsOn\n      ? this.event.endsOn\n      : this.event.beginsOn;\n  }\n\n  get eventCapacityOK(): boolean {\n    if (this.event.draft) return true;\n    if (!this.event.options.maximumAttendeeCapacity) return true;\n    return (\n      this.event.options.maximumAttendeeCapacity >\n      this.event.participantStats.participant\n    );\n  }\n\n  get numberOfPlacesStillAvailable(): number {\n    if (this.event.draft) return this.event.options.maximumAttendeeCapacity;\n    return (\n      this.event.options.maximumAttendeeCapacity -\n      this.event.participantStats.participant\n    );\n  }\n\n  async anonymousParticipationConfirmed(): Promise<boolean> {\n    return isParticipatingInThisEvent(this.uuid);\n  }\n\n  async cancelAnonymousParticipation(): Promise<void> {\n    const token = (await getLeaveTokenForParticipation(this.uuid)) as string;\n    await this.leaveEvent(this.event, this.config.anonymous.actorId, token);\n    await removeAnonymousParticipation(this.uuid);\n    this.anonymousParticipation = null;\n  }\n\n  get ableToReport(): boolean {\n    return (\n      this.config &&\n      (this.currentActor.id != null || this.config.anonymous.reports.allowed)\n    );\n  }\n\n  get organizer(): IActor | null {\n    if (this.event.attributedTo && this.event.attributedTo.id) {\n      return this.event.attributedTo;\n    }\n    if (this.event.organizerActor) {\n      return this.event.organizerActor;\n    }\n    return null;\n  }\n\n  get organizerDomain(): string | null {\n    if (this.organizer) {\n      return this.organizer.domain;\n    }\n    return null;\n  }\n\n  metadataToComponent: Record<string, string> = {\n    \"mz:live:twitch:url\": \"integration-twitch\",\n    \"mz:live:peertube:url\": \"integration-peertube\",\n    \"mz:live:youtube:url\": \"integration-youtube\",\n    \"mz:visio:jitsi_meet\": \"integration-jitsi-meet\",\n    \"mz:notes:etherpad:url\": \"integration-etherpad\",\n  };\n\n  get integrations(): Record<string, IEventMetadataDescription> {\n    return this.event.metadata\n      .map((val) => {\n        const def = eventMetaDataList.find((dat) => dat.key === val.key);\n        return {\n          ...def,\n          ...val,\n        };\n      })\n      .reduce((acc: Record<string, IEventMetadataDescription>, metadata) => {\n        const component = this.metadataToComponent[metadata.key];\n        if (component !== undefined) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          acc[component] = metadata;\n        }\n        return acc;\n      }, {});\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.section {\n  padding: 1rem 2rem 4rem;\n}\n\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.5s;\n}\n\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n\ndiv.sidebar {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n\n  position: relative;\n\n  &::before {\n    content: \"\";\n    background: #b3b3b2;\n    position: absolute;\n    bottom: 30px;\n    top: 30px;\n    left: 0;\n    height: calc(100% - 60px);\n    width: 1px;\n  }\n\n  div.organizer {\n    display: inline-flex;\n    padding-top: 10px;\n\n    a {\n      color: #4a4a4a;\n\n      span {\n        line-height: 2.7rem;\n        padding-right: 6px;\n      }\n    }\n  }\n}\n\n.intro {\n  background: white;\n\n  .is-3-tablet {\n    width: initial;\n  }\n\n  p.tags {\n    a {\n      text-decoration: none;\n    }\n\n    span {\n      &.tag {\n        margin: 0 2px;\n      }\n    }\n  }\n}\n\n.event-description-wrapper {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  padding: 0;\n\n  @media all and (min-width: 672px) {\n    flex-direction: row-reverse;\n  }\n\n  & > aside,\n  & > div {\n    @media all and (min-width: 672px) {\n      margin: 2rem auto;\n    }\n  }\n\n  aside.event-metadata {\n    min-width: 20rem;\n    flex: 1;\n    @media all and (min-width: 672px) {\n      padding-left: 1rem;\n    }\n\n    .sticky {\n      position: sticky;\n      background: white;\n      top: 50px;\n      padding: 1rem;\n    }\n  }\n\n  div.event-description-comments {\n    min-width: 20rem;\n    padding: 1rem;\n    flex: 2;\n    background: white;\n  }\n\n  .description-content {\n    ::v-deep h1 {\n      font-size: 2rem;\n    }\n\n    ::v-deep h2 {\n      font-size: 1.5rem;\n    }\n\n    ::v-deep h3 {\n      font-size: 1.25rem;\n    }\n\n    ::v-deep ul {\n      list-style-type: disc;\n    }\n\n    ::v-deep li {\n      margin: 10px auto 10px 2rem;\n    }\n\n    ::v-deep blockquote {\n      border-left: 0.2em solid #333;\n      display: block;\n      padding-left: 1em;\n    }\n\n    ::v-deep p {\n      margin: 10px auto;\n\n      a {\n        display: inline-block;\n        padding: 0.3rem;\n        background: $secondary;\n        color: #111;\n\n        &:empty {\n          display: none;\n        }\n      }\n    }\n  }\n}\n\n.comments {\n  padding-top: 3rem;\n\n  a h3#comments {\n    margin-bottom: 10px;\n  }\n}\n\n.more-events {\n  background: white;\n  padding: 1rem 1rem 4rem;\n\n  & > .title {\n    font-size: 1.5rem;\n  }\n}\n\n.dropdown .dropdown-trigger span {\n  cursor: pointer;\n}\n\na.dropdown-item,\n.dropdown .dropdown-menu .has-link a,\nbutton.dropdown-item {\n  white-space: nowrap;\n  width: 100%;\n  padding-right: 1rem;\n  text-align: right;\n}\n\na.participations-link {\n  text-decoration: none;\n}\n\n.event-status .tag {\n  font-size: 1rem;\n}\n\n.no-border {\n  border: 0;\n  cursor: auto;\n}\n\n.wrapper,\n.intro-wrapper {\n  display: flex;\n  flex-direction: column;\n}\n\n.intro-wrapper {\n  position: relative;\n  padding: 0 16px 16px;\n  background: #fff;\n\n  .date-calendar-icon-wrapper {\n    margin-top: 16px;\n    height: 0;\n    display: flex;\n    align-items: flex-end;\n    align-self: flex-start;\n    margin-bottom: 7px;\n    margin-left: 0rem;\n  }\n}\n.title {\n  margin: 0;\n  font-size: 2rem;\n}\n</style>\n"
      },
      {
        "file": "js/src/graphql/event.ts",
        "description": "## Hyperlink with router 5/5 - GraphQL query with variable\n\nThe named variable `$uuid` from the component's prop can be used for GraphQL query.",
        "line": 186,
        "contents": "import gql from \"graphql-tag\";\nimport { ADDRESS_FRAGMENT } from \"./address\";\nimport { TAG_FRAGMENT } from \"./tags\";\n\nconst PARTICIPANT_QUERY_FRAGMENT = gql`\n  fragment ParticipantQuery on Participant {\n    role\n    id\n    actor {\n      preferredUsername\n      avatar {\n        id\n        url\n      }\n      name\n      id\n      domain\n    }\n    event {\n      id\n      uuid\n    }\n    metadata {\n      cancellationToken\n      message\n    }\n    insertedAt\n  }\n`;\n\nconst PARTICIPANTS_QUERY_FRAGMENT = gql`\n  fragment ParticipantsQuery on PaginatedParticipantList {\n    total\n    elements {\n      ...ParticipantQuery\n    }\n  }\n  ${PARTICIPANT_QUERY_FRAGMENT}\n`;\n\nconst EVENT_OPTIONS_FRAGMENT = gql`\n  fragment EventOptions on EventOptions {\n    maximumAttendeeCapacity\n    remainingAttendeeCapacity\n    showRemainingAttendeeCapacity\n    anonymousParticipation\n    showStartTime\n    showEndTime\n    offers {\n      price\n      priceCurrency\n      url\n    }\n    participationConditions {\n      title\n      content\n      url\n    }\n    attendees\n    program\n    commentModeration\n    showParticipationPrice\n    hideOrganizerWhenGroupEvent\n  }\n`;\n\nconst FULL_EVENT_FRAGMENT = gql`\n  fragment FullEvent on Event {\n    id\n    uuid\n    url\n    local\n    title\n    description\n    beginsOn\n    endsOn\n    status\n    visibility\n    joinOptions\n    draft\n    picture {\n      id\n      url\n      name\n      metadata {\n        width\n        height\n        blurhash\n      }\n    }\n    publishAt\n    onlineAddress\n    phoneAddress\n    physicalAddress {\n      ...AdressFragment\n    }\n    organizerActor {\n      avatar {\n        id\n        url\n      }\n      preferredUsername\n      domain\n      name\n      url\n      id\n      summary\n    }\n    contacts {\n      avatar {\n        id\n        url\n      }\n      preferredUsername\n      name\n      summary\n      domain\n      url\n      id\n    }\n    attributedTo {\n      avatar {\n        id\n        url\n      }\n      preferredUsername\n      name\n      summary\n      domain\n      url\n      id\n    }\n    participantStats {\n      going\n      notApproved\n      participant\n    }\n    tags {\n      ...TagFragment\n    }\n    relatedEvents {\n      id\n      uuid\n      title\n      beginsOn\n      picture {\n        id\n        url\n        name\n        metadata {\n          width\n          height\n          blurhash\n        }\n      }\n      physicalAddress {\n        id\n        description\n      }\n      organizerActor {\n        id\n        avatar {\n          id\n          url\n        }\n        preferredUsername\n        domain\n        name\n      }\n    }\n    options {\n      ...EventOptions\n    }\n    metadata {\n      key\n      title\n      value\n      type\n    }\n  }\n  ${ADDRESS_FRAGMENT}\n  ${TAG_FRAGMENT}\n  ${EVENT_OPTIONS_FRAGMENT}\n`;\n\nexport const FETCH_EVENT = gql`\n  query FetchEvent($uuid: UUID!) {\n    event(uuid: $uuid) {\n      ...FullEvent\n    }\n  }\n  ${FULL_EVENT_FRAGMENT}\n`;\n\nexport const FETCH_EVENT_BASIC = gql`\n  query ($uuid: UUID!) {\n    event(uuid: $uuid) {\n      id\n      uuid\n      joinOptions\n      participantStats {\n        going\n        notApproved\n        notConfirmed\n        participant\n      }\n    }\n  }\n`;\n\nexport const FETCH_EVENTS = gql`\n  query FetchEvents(\n    $orderBy: EventOrderBy\n    $direction: SortDirection\n    $page: Int\n    $limit: Int\n  ) {\n    events(\n      orderBy: $orderBy\n      direction: $direction\n      page: $page\n      limit: $limit\n    ) {\n      total\n      elements {\n        id\n        uuid\n        url\n        local\n        title\n        description\n        beginsOn\n        endsOn\n        status\n        visibility\n        insertedAt\n        picture {\n          id\n          url\n        }\n        publishAt\n        # online_address,\n        # phone_address,\n        physicalAddress {\n          id\n          description\n          locality\n        }\n        organizerActor {\n          id\n          avatar {\n            id\n            url\n          }\n          preferredUsername\n          domain\n          name\n        }\n        attributedTo {\n          avatar {\n            id\n            url\n          }\n          preferredUsername\n          name\n        }\n        category\n        tags {\n          ...TagFragment\n        }\n      }\n    }\n  }\n  ${TAG_FRAGMENT}\n`;\n\nexport const CREATE_EVENT = gql`\n  mutation createEvent(\n    $organizerActorId: ID!\n    $attributedToId: ID\n    $title: String!\n    $description: String!\n    $beginsOn: DateTime!\n    $endsOn: DateTime\n    $status: EventStatus\n    $visibility: EventVisibility\n    $joinOptions: EventJoinOptions\n    $draft: Boolean\n    $tags: [String]\n    $picture: MediaInput\n    $onlineAddress: String\n    $phoneAddress: String\n    $category: String\n    $physicalAddress: AddressInput\n    $options: EventOptionsInput\n    $contacts: [Contact]\n  ) {\n    createEvent(\n      organizerActorId: $organizerActorId\n      attributedToId: $attributedToId\n      title: $title\n      description: $description\n      beginsOn: $beginsOn\n      endsOn: $endsOn\n      status: $status\n      visibility: $visibility\n      joinOptions: $joinOptions\n      draft: $draft\n      tags: $tags\n      picture: $picture\n      onlineAddress: $onlineAddress\n      phoneAddress: $phoneAddress\n      category: $category\n      physicalAddress: $physicalAddress\n      options: $options\n      contacts: $contacts\n    ) {\n      ...FullEvent\n    }\n  }\n  ${FULL_EVENT_FRAGMENT}\n`;\n\nexport const EDIT_EVENT = gql`\n  mutation updateEvent(\n    $id: ID!\n    $title: String\n    $description: String\n    $beginsOn: DateTime\n    $endsOn: DateTime\n    $status: EventStatus\n    $visibility: EventVisibility\n    $joinOptions: EventJoinOptions\n    $draft: Boolean\n    $tags: [String]\n    $picture: MediaInput\n    $onlineAddress: String\n    $phoneAddress: String\n    $organizerActorId: ID\n    $attributedToId: ID\n    $category: String\n    $physicalAddress: AddressInput\n    $options: EventOptionsInput\n    $contacts: [Contact]\n    $metadata: EventMetadataInput\n  ) {\n    updateEvent(\n      eventId: $id\n      title: $title\n      description: $description\n      beginsOn: $beginsOn\n      endsOn: $endsOn\n      status: $status\n      visibility: $visibility\n      joinOptions: $joinOptions\n      draft: $draft\n      tags: $tags\n      picture: $picture\n      onlineAddress: $onlineAddress\n      phoneAddress: $phoneAddress\n      organizerActorId: $organizerActorId\n      attributedToId: $attributedToId\n      category: $category\n      physicalAddress: $physicalAddress\n      options: $options\n      contacts: $contacts\n      metadata: $metadata\n    ) {\n      ...FullEvent\n    }\n  }\n  ${FULL_EVENT_FRAGMENT}\n`;\n\nexport const JOIN_EVENT = gql`\n  mutation JoinEvent(\n    $eventId: ID!\n    $actorId: ID!\n    $email: String\n    $message: String\n    $locale: String\n  ) {\n    joinEvent(\n      eventId: $eventId\n      actorId: $actorId\n      email: $email\n      message: $message\n      locale: $locale\n    ) {\n      ...ParticipantQuery\n    }\n  }\n  ${PARTICIPANT_QUERY_FRAGMENT}\n`;\n\nexport const LEAVE_EVENT = gql`\n  mutation LeaveEvent($eventId: ID!, $actorId: ID!, $token: String) {\n    leaveEvent(eventId: $eventId, actorId: $actorId, token: $token) {\n      actor {\n        id\n      }\n    }\n  }\n`;\n\nexport const CONFIRM_PARTICIPATION = gql`\n  mutation ConfirmParticipation($token: String!) {\n    confirmParticipation(confirmationToken: $token) {\n      actor {\n        id\n      }\n      event {\n        id\n        uuid\n        joinOptions\n      }\n      role\n    }\n  }\n`;\n\nexport const UPDATE_PARTICIPANT = gql`\n  mutation UpdateParticipant($id: ID!, $role: ParticipantRoleEnum!) {\n    updateParticipation(id: $id, role: $role) {\n      role\n      id\n    }\n  }\n`;\n\nexport const DELETE_EVENT = gql`\n  mutation DeleteEvent($eventId: ID!) {\n    deleteEvent(eventId: $eventId) {\n      id\n    }\n  }\n`;\n\nexport const PARTICIPANTS = gql`\n  query Participants($uuid: UUID!, $page: Int, $limit: Int, $roles: String) {\n    event(uuid: $uuid) {\n      id\n      uuid\n      title\n      participants(page: $page, limit: $limit, roles: $roles) {\n        ...ParticipantsQuery\n      }\n      participantStats {\n        going\n        notApproved\n        rejected\n        participant\n      }\n    }\n  }\n  ${PARTICIPANTS_QUERY_FRAGMENT}\n`;\n\nexport const EVENT_PERSON_PARTICIPATION = gql`\n  query EventPersonParticipation($actorId: ID!, $eventId: ID!) {\n    person(id: $actorId) {\n      id\n      participations(eventId: $eventId) {\n        total\n        elements {\n          id\n          role\n          actor {\n            id\n          }\n          event {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const EVENT_PERSON_PARTICIPATION_SUBSCRIPTION_CHANGED = gql`\n  subscription EventPersonParticipationSubscriptionChanged(\n    $actorId: ID!\n    $eventId: ID!\n  ) {\n    eventPersonParticipationChanged(personId: $actorId) {\n      id\n      participations(eventId: $eventId) {\n        total\n        elements {\n          id\n          role\n          actor {\n            id\n          }\n          event {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const FETCH_GROUP_EVENTS = gql`\n  query FetchGroupEvents(\n    $name: String!\n    $afterDateTime: DateTime\n    $beforeDateTime: DateTime\n    $organisedEventsPage: Int\n    $organisedEventslimit: Int\n  ) {\n    group(preferredUsername: $name) {\n      id\n      preferredUsername\n      domain\n      name\n      organizedEvents(\n        afterDatetime: $afterDateTime\n        beforeDatetime: $beforeDateTime\n        page: $organisedEventsPage\n        limit: $organisedEventslimit\n      ) {\n        elements {\n          id\n          uuid\n          title\n          beginsOn\n          draft\n          options {\n            maximumAttendeeCapacity\n          }\n          participantStats {\n            participant\n            notApproved\n          }\n          attributedTo {\n            id\n            preferredUsername\n            name\n            domain\n          }\n          organizerActor {\n            id\n            preferredUsername\n            name\n            domain\n          }\n        }\n        total\n      }\n    }\n  }\n`;\n\nexport const CLOSE_EVENTS = gql`\n  query CloseEvents($location: String, $radius: Float) {\n    searchEvents(location: $location, radius: $radius, page: 1, limit: 10) {\n      total\n      elements {\n        id\n        title\n        uuid\n        beginsOn\n        picture {\n          id\n          url\n        }\n        tags {\n          slug\n          title\n        }\n        __typename\n      }\n    }\n  }\n`;\n"
      }
    ],
    "isPrimary": true,
    "description": "A quick overview of how browsing to the default URI translate to VueJs components and behaviours",
    "ref": "09cc5d1bd1ecd24e1e879b0392cf5830b2581c74"
  }